Widget.types.info_bar = {
	initialize: function() {
		var _this = this;
		this.sidebar = AdminInterface.sidebar;
		this.content_area = AdminInterface.content;
		this.button_prototype = jQuery('<a/>').addClass('info-bar-button').text(' ');

		var methods = {};

		var add_item = function(opts) {
			opts = jQuery.extend({
				identifier: Widget.uuid(),
				element: null,
				parent: 'left',
				is_before: false,
				accesskey: null,
				action: null,
				disabled: false,
				class_name: '',
				disable: function() {
					this.element.fadeTo('slow', 0.3);
					this.disabled = true;
					return this;
				},
				enable: function() {
					this.element.fadeTo('slow', 1);
					this.disabled = false;
					return this;
				},
				text: function() {
					this.element.text.apply(this.element, arguments);
					return this;
				}
			}, opts);
			if(opts.parent.constructor === String) {
				opts.parent = _this['infobar_'+opts.parent];
			} else if(opts.parent.constructor === Boolean) {
				opts.parent = opts.parent ? _this.infobar_right : _this.infobar_left;
			} else if(opts.parent.element) {
				opts.parent = opts.parent.element;
			}
			var func = opts.is_before ? opts.element.prependTo : opts.element.appendTo;
			if(opts.accesskey) {
				opts.element.attr('accesskey', opts.accesskey);
			}
			if(opts.documentation) {
				opts.element.attr('data-documentation-part', opts.documentation);
			}
			opts.element.addClass('info-bar-element').addClass(opts.class_name);
			func.call(opts.element, opts.parent);
			if(opts.action) {
				opts.element.click(function(event) {
					if(!opts.disabled) {
						opts.action.call(this, event, opts);
					}
				});
			}

			// Allow chaining of add_* method calls
			return jQuery.extend(opts, methods);
		};

		jQuery.extend(methods, {
			add_element: function(element, is_right_container, is_before, accesskey, options) {
				options = jQuery.extend(options || {}, {
					element: element,
					parent: is_right_container,
					is_before: is_before,
					accesskey: accesskey
				});
				return add_item(options);
			},

			add_button: function(class_name, action, accesskey, is_right_container, is_before, title_text, options) {
				if(title_text === undefined && class_name === 'add-new-item') {
					title_text = "{{writeString=wns.create_new_entry}}";
				}
				var element = _this.button_prototype.clone();
				element.attr('title', title_text);
				options = jQuery.extend(options || {}, {
					element: element,
					class_name: class_name,
					accesskey: accesskey,
					action: action,
					parent: is_right_container,
					is_before: is_before
				});
				return add_item(options);
			},

			add_documentation_link: function(link, link_title) {
				this.add_button('go-to-documentation', function() {
					window.location.href = link;
				}, '', 'commons', false, link_title);
			},

			add_menu: function(class_name) {
				return this;
			},

			add_menu_item: function(parent, label, action, accesskey, class_name) {
				return this;
			},

			add_search_input: function(default_value, click_handler, options) {
				if(!default_value) {
					default_value = "{{writeString=wns.search.enter_search}}";
				}
				var search_input = jQuery('<input/>', {name: 'search', value: default_value, type: 'text'}).prop({autocomplete: 'off'});

				options = jQuery.extend(options || {}, {
					element: search_input,
					parent: 'right',
					accesskey: 'f',
					class_name: 'default_state search_field'
				});

				var result = add_item(options);
				var previous_search = null;

				var clear_button = this.add_button('search_field_reset rapila-icon', null, null, true).text('⊗').element.hide();
				var search_button = this.add_button('search_button rapila-icon', function() {
					if((search_input.is('.default_state') || search_input.val() === '') && !previous_search) {
						Widget.notifyUser(Widget.logSeverity.INFO, "{{writeString=wns.not_applicable.add_search_word}}");
						return;
					}
					if(search_input.is('.default_state')) {
						previous_search = null;
					} else {
						previous_search = search_input.val();
					}
					click_handler(previous_search);
				}, null, true).text('▶').element;
				clear_button.click(function(event) {
					search_input.val('').focus();
					search_button.removeClass('active');
					previous_search = null;
					click_handler(previous_search);
					jQuery(this).hide();
				});

				search_input.focus(function() {
					if(search_input.is('.default_state')) {
						search_input.removeClass('default_state').val('');
					}
				}).blur(function() {
					if(search_input.val() === '') {
						search_input.addClass('default_state').val(default_value);
					}
				}).on('keyup', function(event) {
					if(event.which === 27) {
						return clear_button.click();
					}
					if(search_input.val() === '') {
						clear_button.hide();
						search_button.removeClass('active');
					} else {
						clear_button.show();
						search_button.addClass('active');
					}
					if(event.which === 13) {
						return search_button.click();
					}
				});

				return result;
			},

			add_row_count_info_for_list: function(list, options) {
				var row_count_info = jQuery('<span/>').addClass('row_count_info');
				list.handle('reloaded', function() {
					row_count_info.text("{{writeParameterizedString=wns.list_count;total=$\\{total\\};current=$\\{current\\}}}".replace(/\$\{total\}/, this.row_count()).replace('${current}', this.current_row_count()));
				}, false, true);
				options = jQuery.extend(options || {}, {element: row_count_info, parent: 'right'});
				return add_item(options);
			},

			add_pager_for_list: function(list, options) {
				var pager = jQuery('<div/>').addClass('pager');
				var prev = jQuery('<span/>').addClass('rapila-icon').text('previous').attr('title', "{{writeString=pager.show_previous_entries}}");
				prev.click(function() {
					if(!prev.is('.disabled')) {
						list.previous_page();
					}
				});
				var next = jQuery('<span/>').addClass('rapila-icon').text('next').attr('title', "{{writeString=pager.show_next_entries}}");
				next.click(function() {
					if(!next.is('.disabled')) {
						list.next_page();
					}
				});
				var status = jQuery('<span>');
				pager.append(prev).append(status).append(next);
				list.handle('reloaded', function() {
					status.text("{{writeParameterizedString=wns.list_pager;total=$\\{total\\};current=$\\{current\\}}}".replace(/\$\{total\}/, this.page_count()).replace('${current}', this.page()+1));
					prev[this.is_first_page() ? 'addClass' : 'removeClass']('disabled');
					next[this.is_last_page() ? 'addClass' : 'removeClass']('disabled');
				}, false, true);
				return add_item(jQuery.extend(options || {parent: 'right'}, {element: pager}));
			}
		});

		jQuery.extend(this, methods);
	},

	prepare: function() {
		this.resizer = this._element.find('.sidebar_resizer');
		this.infobar_left = this._element.find('.infobar_left');
		this.infobar_right = this._element.find('.infobar_right');
		this.infobar_commons = this.infobar_right.find('.infobar_commons');
		this.admin_menu_right = this._element.find('.admin_menu_right');
		this.admin_menu_left = this._element.find('.admin_menu_left');

		if(this.sidebar.length === 0) {
			this.resizer.remove();
			this.infobar_left.remove();
			this.infobar_right.css('left', 0);
			return;
		} else {
			this.resizer.show();
		}
		this.resizer.draggable({
			axis: 'x',
			containment: 'parent',
			drag: this.resizer_moved.bind(this)
		});
	},

	resizer_moved: function(event, ui) {
		if(ui.position.left>this.settings.max_width) {
			ui.position.left = this.settings.max_width;
		} else if(ui.position.left < this.settings.min_width) {
			ui.position.left = this.settings.min_width;
		}
		var px = ''+ui.position.left+'px';
		this.sidebar.css('width', px);
		this.content_area.css('left', px);
		this.infobar_right.css('left', px);
		this.admin_menu_right.css('left', px);
		this.admin_menu_left.css('width', px);
	},

	settings: {
		max_width: 480,
		min_width: 100
	}
};
