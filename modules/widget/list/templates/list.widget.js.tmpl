Widget.types.list = {
	/**
	 * Sets up the element: adds heading and content wrappers and adds event listeners.
	 */
	prepare: function() {
		this.row_prototype = jQuery(this._element.is('table') ? '<tr/>' : '<li/>').addClass('ui-list-row');

		if(!this._element.is('table')) {
			this.heading_element = this.body_element = this._element;
		} else {
			this.heading_element = this._element.find('> thead');
			if(!this.heading_element.length) {
				this.heading_element = jQuery('<thead/>').appendTo(this._element);
			}
			this.body_element = this._element.find('> tbody');
			if(!this.body_element.length) {
				this.body_element = jQuery('<tbody/>').appendTo(this._element);
			}
		}

		var _this = this;

		if(this.settings.row_model_drag_and_drop_identifier) {
			this.model_name();
			if(!this.settings.row_model_name) {
				this.settings.row_model_drag_and_drop_identifier = false;
			} else {
				this.settings.dnd = Widget.create('model_drag_and_drop');
			}
		}
		if(this.settings.handle_removed_tags && this.model_name()) {
			// Tag remove handler
			Widget.handle('rapila-tag-removed-from-'+this.model_name(), function(event, result) {
				_this.update_row(_this.row_from_row_data({id: result.tagged_item_id}));
			});
		}

		var row_metadata = function(row) {
			var rows = _this.all_rows();
			return [rows.index(row), row];
		};

		var cell_metadata = function(cell) {
			var rows = _this.all_rows();
			var row = cell.closest('.ui-list-row');
			var cellIndex = row.find('.ui-list-cell').index(cell);
			var col_schema = _this.schema_for_col(cellIndex);
			return [rows.index(row), col_schema, row, cell];
		};

		this._element.on('dblclick', '.ui-list-row', function(event) {
			var row = jQuery(this);
			return _this.fire.apply(_this, ['list-row_dblclick', event].concat(row_metadata(row)));
		});

		this._element.on('click', '.ui-list-row', function(event) {
			var row = jQuery(this);
			_this.activate_row(row, event);
			return _this.fire.apply(_this, ['list-row_click', event].concat(row_metadata(row)));
		});

		this._element.on('mouseenter mouseleave', '.ui-list-row', function(event) {
			var isOver = event.type === 'mouseenter' || event.type === 'mousein' || event.type === 'mouseover';
			var row = jQuery(this);
			if(_this.settings.row_hover) {
				row[isOver ? 'addClass' : 'removeClass']('ui-state-hover');
			}
			return _this.fire.apply(_this, ['list-row_hover', event].concat(row_metadata(row)).concat([isOver]));
		});

		if(_this._element.is('table')) {
			this._element.on('click', '.ui-list-cell', function(event) {
				return _this.fire.apply(_this, ['list-cell_click', event].concat(cell_metadata(jQuery(this))));
			});
			this._element.on('mouseenter mouseleave', '.ui-list-cell', function(event) {
				return _this.fire.apply(_this, ['list-cell_hover', event].concat(cell_metadata(jQuery(this))));
			});
		}

		this.reload(true);
		if(this._element.data('listWidgetType')) {
			var type = this._element.data('listWidgetType');
			var info = Widget.loadInfo(type);
			if(info) {
				var list_widget = new Widget.types[type]({session_id: this.widgetId});
				if(list_widget.initialize) {
					list_widget.initialize();
				}
				list_widget._element = this._element;
				list_widget._list = this;
				if(list_widget.prepare) {
					list_widget.prepare();
				}
			}
		}
	},
	
	/**
	 * Activate a row (changing the selection). This is being triggered when a row has been clicked. What exactly is done varies depending on the row_click_active_mode and row_click_active_exclusive settings as well as the modifier keys that came with the event.
	 */
	activate_row: function(row, event, previous_selection) {
		if(row && row.constructor === Number) {
			row = this.row_from_number(row);
		}
		previous_selection = previous_selection || this.active_row_datas().sort();
		if(!row) {
			this.all_rows().removeClass(this.settings.row_click_active_class);
		} else if(this.settings.row_click_active_mode) {
			var do_toggle = this.settings.row_click_active_mode === 'toggle';
			var exclusive = !!this.settings.row_click_active_exclusive;
			if(this.settings.row_click_active_exclusive === 'modifiers' && event && (event.ctrlKey || event.metaKey || event.shiftKey)) {
				//Ignore toggle mode on modifier keys
				exclusive = false;
				do_toggle = false;
				if(event.ctrlKey || event.metaKey) {
					do_toggle = true;
				}
				if(event.shiftKey) {
					var topmost_active_row = this.row_number(this.active_row().eq(0));
					var current_row = this.row_number(row);
					for(var i = Math.min(topmost_active_row, current_row); i <= Math.max(topmost_active_row, current_row); i++) {
						this.row_from_number(i).addClass(this.settings.row_click_active_class);
					}
				}
				event.preventDefault();
				event.stopPropagation();
			}
			if(exclusive) {
				this.all_rows().not(row).removeClass(this.settings.row_click_active_class);
			}
			if(!row.hasClass(this.settings.row_click_active_class)) {
				row.addClass(this.settings.row_click_active_class);
			} else if(do_toggle) {
				row.removeClass(this.settings.row_click_active_class);
			}
		}
		this.fire_selection_changed(previous_selection, event);
	},

	/**
	 * Internal. Fires atomic selection mutation events.
	 */
	fire_selection_changed: function(previous_selection, event) {
		var new_selection = this.active_row_datas().sort();
		if(JSON.stringify(previous_selection) !== JSON.stringify(new_selection)) {
			if(event) {
				this.fire('list-selection_changed', event, new_selection, previous_selection);
			} else {
				this.fire('list-selection_changed', new_selection, previous_selection);
			}
		}
	},
	
	/**
	 * Returns all rows currently selected.
	 */
	active_row: function() {
		return this.all_rows().filter('.'+this.settings.row_click_active_class);
	},

/**
 * Returns the values of all data columns for rows currently selected.
 */
	active_row_datas: function() {
		var _this = this;
		return this.active_row().map(function() {
			return _this.collect_row_data(jQuery(this));
		}).get();
	},
	
	/**
	 * Internal. Adds a new row into the list.
	 */
	insert_row: function(rowData, isHeading, previousRow) {
		var _this = this;
		isHeading = !!isHeading;
		var row = previousRow || this.row_prototype.clone();
		if(isHeading) {
			row.addClass('ui-list-headrow').removeClass('ui-list-row');
		}
		var className = isHeading ? 'ui-list-heading' : 'ui-list-cell';
		var column_prototype = jQuery(isHeading ? "<th>" : "<td>").addClass(className).prop('tabindex', -1);
		jQuery.each(this.schema, function(i) {
			var cell = _this._element.is('table') ? column_prototype.clone() : row;
			row.append(_this.insert_cell(row, cell, i, rowData, isHeading));
		});

		if(!previousRow) {
			if(isHeading) {
				this.heading_element.append(row);
			} else {
				this.body_element.append(row);
			}

			if(this.settings.row_model_drag_and_drop_identifier && !isHeading) {
				var rowDragId = rowData[this.settings.row_model_drag_and_drop_identifier];
				this.settings.dnd.init_dnd(row, this.settings.row_model_name, rowDragId, true);
				this.settings.dnd.handle('model-dragged-onto-'+this.settings.row_model_name+'-'+rowDragId, function() {
					_this.update_row(row);
				});
			}
		}

		return row;
	},
	
	/**
	 * Internal. Adds a cell at the end of a row.
	 */
	insert_cell: function(row, into, index, rowData, isHeading) {
		var metadata = this.schema[index];
		var data = rowData[metadata.identifier];
		if(isHeading && metadata.is_sortable) {
			this.prepare_sort(row, into, metadata);
		}
		var display_type = metadata.display_type;
		if(display_type === null) {
			display_type = 'text';
			if(data === true || data === false) {
				display_type = 'boolean';
			} else if(typeof(data) === 'number' || (typeof(data) === 'string' && data !== '' && !isNaN(data))) {
				display_type = 'numeric';
			}
		}
		// Add class with display type
		into.addClass('display-type-'+display_type);
		if(isHeading) {
			display_type = 'text';
		}
		if(metadata.display_type === 'data') {
			row.data(metadata.identifier, data);
			return null;
		}
		if(metadata.display_type === 'classname') {
			if(data) {
				row.addClass(metadata.identifier+'-'+data);
			}
			return null;
		}
		// add class identifier with optional classname (align_right/align_center/default:text-align:left;)
		into.addClass(metadata.identifier + (metadata.classname ? ' ' + metadata.classname : ''));
		
		// add isHeading for adding span for sortable
		Widget.types.list.types[display_type](into, data, metadata, isHeading);
		if(isHeading && metadata.heading_filter) {
			this.prepare_filter(into, metadata);
		}
		return row === into ? null : into;
	},
	
	/**
	 * Creates a widget in the heading row for a given heading cell.
	 */
	prepare_filter: function(cell, metadata) {
		var is_widget = !jQuery.isPlainObject(metadata.heading_filter);
		var value_changed = function(event, value) {
			if(event.val) {
				value = event.val();
			}
			this.setOption(metadata.identifier, value);
			this.reload();
		}.bind(this);
		if(is_widget) {
			var widget_type = jQuery.isArray(metadata.heading_filter) ? metadata.heading_filter[0] : metadata.heading_filter;
			var session_key = jQuery.isArray(metadata.heading_filter) ? metadata.heading_filter[1] : metadata.heading_filter+'_for_list';
			Widget.createWithElement(widget_type, function(widget) {
				widget.handle('value-changed', value_changed);
				widget._element.appendTo(cell);
			}, session_key);
		} else {
			var filter = jQuery('<select/>');
			jQuery.each(metadata.heading_filter, function(value, text) {
				filter.append(jQuery('<option/>').text(text).attr('value', value));
			});
			filter.bind('change', value_changed).appendTo(cell);
		}
	},
	
	/**
	 * Internal. Updates a heading cell for handling sort state and receiving sort clicks.
	 */
	prepare_sort: function(row, into, metadata) {
		var _this = this;
		into.addClass('sortable');
		if(this.sort && this.sort[0] == metadata.identifier) {
			into.addClass(this.sort[1]);
		}
		into.click(function(){
			_this.sort = [metadata.identifier, into.is('.asc') ? 'desc' : 'asc'];
			_this.setOrderColumnSort.apply(_this, _this.sort);
			_this.reload();
		});
	},
	
	/**
	 * Internal. Updates heading cells to represente the current sort column.
	 */
	update_sort: function() {
		var all_headings = this._element.find('.ui-list-heading');
		var sort = this.sort;
		var _this = this;
		all_headings.filter('.sortable').removeClass('asc').removeClass('desc').each(function() {
			var sortable = jQuery(this);
			var index = all_headings.index(sortable);
			if(_this.schema_for_col(index).identifier == sort[0]) {
				sortable.addClass(sort[1]);
			}
		});
	},
	
	/**
	 * Internal. Adds or removes reorderable states of reorder cells.
	 */
	update_reorderable: function() {
		var reorderable = this._element.find('tbody');
		var currentSortSchema = null;
		var _this = this;
		if(this.sort) {
			jQuery.each(this.schema, function(i, schema) {
				if(schema.identifier === _this.sort[0]) {
					if(schema.display_type === 'reorderable' && _this.sort[1] === 'asc') {
						currentSortSchema = schema;
					}
					return false;
				}
			});
		}
		if(currentSortSchema !== null && this.allowSort(currentSortSchema.identifier, WidgetJSONOptions.with_async(false))) {
			var currentSchema = null;
			reorderable.sortable({
				items: '.ui-list-row',
				handle: '.ui-sortable-handle',
				start: function(event, ui) {
					var item = event.originalEvent.target;
					currentSchema = _this.schema_for_col(item);
				},
				stop: function() {
					currentSchema = null;
				},
				update: function(event, ui) {
					_this.update_reorderable_order(ui.item, currentSchema);
				}
			});
		} else if(reorderable.is(':ui-sortable')) {
			reorderable.sortable('destroy');
		}
		this.update_reorderable_axis();
	},
	
	/**
	 * Internal. Called when a row has been dragged to a new position. Updates position in the DOM and on the server.
	 */
	update_reorderable_order: function(row, schema) {
		var relation = 'before';
		var related = row.next('.ui-list-row');
		if(related.length === 0) {
			related = row.prev('.ui-list-row');
			relation = 'after';
			if(related.length === 0) {
				// Only one element in the list: no sorting necessary
				return;
			}
		}
		this.doSort(schema.identifier, this.collect_row_data(row), this.collect_row_data(related), relation);
	},
	
	/**
	 * Internal. Thumbnail view supports reordering by dragging in both axes, list mode only allows dragging vertically.
	 */
	update_reorderable_axis: function() {
		var reorderable = this._element.find('tbody');
		if(reorderable.is(':ui-sortable')) {
			var axis = this.thumbnail_view() ? false : 'y';
			reorderable.sortable('option', 'axis', axis);
		}
	},
	
	/**
	 * Removes a row from the list and on the server.
	 */
	delete_row: function(row) {
		if(row.constructor === Number) {
			row = this.row_from_number(row);
		}
		var rowData = this.collect_row_data(row);
		this.deleteRow(rowData, function(result) {
			if(arguments[1]) {
				return;
			}
			var active_rows = null;
			if(row.hasClass(this.settings.row_click_active_class)) {
				active_rows = this.active_row_datas().sort();
			}
			row.remove();
			active_rows && this.fire_selection_changed(active_rows);
			this.fire('row-deleted', result);
		});
	},
	
	/**
	 * Returns an object of all data fields and their values from a row.
	 */
	collect_row_data: function(row) {
		var rowData = {};
		var has_data = false;
		jQuery.each(this.schema, function(i) {
			if(this.schema[i].display_type === 'data') {
				has_data = true;
				rowData[this.schema[i].identifier] = row.data(this.schema[i].identifier);
			}
		}.bind(this));
		if(!has_data) {
			return this.row_number(row);
		}
		return rowData;
	},

	/**
	 * Returns the 0-indexed number for a row element.
	 */
	row_number: function(row) {
		return this.all_rows().index(row);
	},

	/**
	 * Changes the state of a boolean cell in the list and on the server.
	 */
	toggle_boolean: function(row, boolean_name, reload_all) {
		if(row.constructor === Number) {
			row = this.row_from_number(row);
		}
		var rowData = this.collect_row_data(row);
		this.toggleBoolean(rowData, boolean_name, function(result) {
			if(reload_all) {
				this.reload();
			} else {
				this.update_row(row);
			}
		});
	},
	
	/**
	 * Reloads a specific row from the server and updates the DOM.
	 */
	update_row: function(row, additonalData) {
		if(!row) {
			return;
		}
		if(row.constructor === Number) {
			row = this.row_from_number(row);
		}
		var rowData = this.collect_row_data(row);

		jQuery.extend(rowData, (additonalData || {}));
		this.rowFromData(rowData, function(row_contents) {
			if(row_contents !== null) {
				this.insert_row(row_contents, false, row.empty());
			} else {
				row.remove();
			}
			this.fire('row-updated', additonalData, row, rowData);
		});
	},
	
	/**
	 * Loads a row from the server by qerying for the given data fields.
	 */
	append_row_with_data: function(rowData) {
		this.rowFromData(rowData, function(row_contents) {
			if(row_contents !== null) {
				this.insert_row(row_contents);
			}
		});
	},
	
	/**
	 * Returns all heading texts.
	 */
	headings: function() {
		var result = {};
		jQuery.each(this.schema, function(i, column) {
			if(column.display_heading) {
				result[column.identifier] = column.heading;
			}
		});
		return result;
	},
	
	/**
	 * Counts how many rows are currently loaded.
	 */
	current_row_count: function() {
		return this.all_rows().length;
	},
	
	/**
	 * Reloads the list. Must be called with true for load_heading on the first load.
	 */
	reload: function(load_heading) {
		this.fire('reloading', load_heading);
		this.toggle_loader(true);
		// store active rows by row data
		var active_rows = !load_heading && this.settings.persist_active_rows && this.active_row_datas();
		if(load_heading) {
			this.heading_element.empty();
		}
		this.body_element.find('.ui-list-row').remove();
		this.sort = this.getOrderColumnSort();
		if(load_heading) {
			this.schema = this.getSchema(load_heading === 'force');
			if(this._element.is('table')) {
				var col = jQuery('<col/>');
				jQuery.each(this.schema, function(i, column) {
					if(column.display_heading) {
						var classes = [column.identifier, 'display-type-'+column.display_type];
						if(column.classname) {
							classes.push(column.classname);
						}
						col.clone().addClass(classes.join(' ')).appendTo(this._element);
					}
				}.bind(this));
			}
			var headings = this.headings();
			if(!jQuery.isEmptyObject(headings)) {
				this.insert_row(headings, true);
			}
		} else {
			this.update_sort();
		}
		this.completeList(function(list) {
			if(list.length > 0) {
				jQuery.each(list, function(i, row) {
					this.insert_row(row);
				}.bind(this));
			}
			this.toggle_loader(false);
			this.update_reorderable();
			if(active_rows) {
				jQuery.each(active_rows, function(id, row) {
					var row = this.row_from_row_data(row);
					row && row.addClass(this.settings.row_click_active_class);
				}.bind(this));
				this.fire_selection_changed(active_rows.sort());
			}
			if(load_heading) {
				if(!active_rows && this.settings.initial_selection) {
					if(this.settings.initial_selection.constructor !== Array) {
						this.settings.initial_selection = [this.settings.initial_selection];
					}
					jQuery.each(this.settings.initial_selection, function(i, obj) {
						var row = this.row_from_row_data(obj);
						row && row.addClass(this.settings.row_click_active_class);
					}.bind(this));
				}
				this.fire('loaded', list.length);
			}
			this.fire('reloaded', list.length);
		});
	},
	
	/**
	 * Internal. Whether or not a schema column is yields a dom element or not.
	 */
	col_is_invisible: function(col) {
		display_type = col.display_type ? col.display_type : col;
		return display_type === 'data' || display_type === 'classname';
	},
	
	/**
	 * Looks inside the schema to see what number the cell of the given type is placed and returns that cell’s jQuery-wrapped DOM element
	 */
	cell_for_identifier: function(identifier, row) {
		var _this = this;
		var counter = 0;
		var cell = null;
		jQuery.each(this.schema, function(i, schema_item) {
			if(_this.col_is_invisible(schema_item)) {
				return;
			}
			if(schema_item.identifier === identifier) {
				cell = row.find('.ui-list-cell:eq('+counter+')');
				return false;
			}
			counter++;
		});
		return cell;
	},

	/**
	 * Can be passed either a (living) cell or a column number and returns the complete schema information for said cell.
	 */
	schema_for_col: function(col) {
		var _this = this;
		var counter = 0;
		var col_schema = null;
		if(col.constructor !== Number) {
			var row = jQuery(col).closest('.ui-list-row');
			col = row.find('.ui-list-cell').index(col);
		}
		jQuery.each(this.schema, function(i, schema_item) {
			if(_this.col_is_invisible(schema_item)) {
				return;
			}
			if(counter++ === col) {
				col_schema = schema_item;
				return false;
			}
		});
		return col_schema;
	},
	
	/**
	 * Returns a jQuery object of all list rows (tr or li elements)
	 */
	all_rows: function() {
		return this._element.find('.ui-list-row');
	},
	
	/**
	 * Returns a jQuery-wrapped DOM element of the rows matching a given row number or an empty jQuery object if none match.
	 */
	row_from_number: function(rowNumber) {
		return this._element.find('.ui-list-row:eq('+rowNumber+')');
	},
	
	/**
	 * Searches a row whose data fields matches those present in the rowData argument.
	 */
	row_from_row_data: function(rowData) {
		if(rowData.constructor === Number) {
			return this.row_from_number(rowData);
		}
		var result = null;
		var _this = this;
		this.all_rows().each(function() {
			var is_found = true;
			var row = jQuery(this);
			jQuery.each(_this.schema, function(i) {
				if(_this.schema[i].display_type === 'data') {
					if(row.data(_this.schema[i].identifier) != rowData[_this.schema[i].identifier]) {
						is_found = false;
						return false;
					}
				}
			});
			if(is_found) {
				result = row;
				return false;
			}
		});
		return result;
	},
	
	/**
	 * Searches multple rows whose data fields match those present in the rowData argument.
	 */
	rows_matching_row_data: function(rowData) {
		var result = [];
		var _this = this;
		this.all_rows().each(function() {
			var row = jQuery(this);
			var all_data_matches = true;
			jQuery.each(rowData, function(dataName, dataValue) {
				jQuery.each(_this.schema, function(i) {
					if(_this.schema[i].display_type === 'data' && _this.schema[i].identifier == dataName) {
						if(row.data(_this.schema[i].identifier) !== dataValue) {
							all_data_matches = false;
							return false;
						}
					}
				});
				if(!all_data_matches) {
					return false;
				}
			});
			if(all_data_matches) {
				result.push(row);
			}
		});
		return result;
	},
	
	/**
	 * Internal. Returns the (cached) model name of this list.
	 */
	model_name: function() {
		if(this.settings.row_model_name === undefined) {
			this.settings.row_model_name = this.getModelName();
		}
		return this.settings.row_model_name;
	},
	
	/**
	 * Internal. Shows or hides the loader for this list.
	 */
	toggle_loader: function(toggle_active) {
		if(toggle_active) {
			Widget.load();
		} else {
			Widget.end_load();
		}
	},
	
	/**
	 * Generates the URL to the list exporter.
	 */
	get_print_link: function() {
		return '{{writeLink=list_export;manager=FileManager}}/'+this._instanceInformation.session_id;
	},
	
	/**
	 * Switches this list into thumbnail view mode. If the value equals 'toggle', the mode is switched. If no `value` is given, the current mode is returned.
	 */
	thumbnail_view: function(value) {
		if(arguments.length) {
			if(value === 'toggle') {
				this._element(!this.thumbnail_view());
			} else {
				this._element[value ? 'addClass' : 'removeClass']('ui-thumbnail-list');
				this.update_reorderable_axis();
			}
		} else {
			return this._element.hasClass('ui-thumbnail-list');
		}
	},
	
	/**
	 * Internal. Stores the list schema. Loaded when reload is called with load_heading set to true.
	 */
	schema: null,
	
	/**
	 * Handler methdo for specific column types. Each of these takes the cell element as well as data and metadata and updates the cell to match the data given.
	 */
	types: {
		/**
		 * Outputs data as text.
		 */
		text: function(column, data, metadata, isHeading) {
			if(isHeading) {
				column = jQuery('<span/>').appendTo(column);
			}
			column.text(data === null ? '-' : data);
		},

		/**
		 * Outputs data as text, intended for numeric contents (because CSS can optimize output).
		 */
		numeric: function(column, data, metadata, isHeading) {
			return this.text(column, data, metadata, isHeading);
		},

		/**
		 * Outputs data from the schema.
		 */
		'static': function(column, data, metadata) {
			data = metadata.heading;
			this.text(column, data);
		},
		
		/**
		 * Outputs icons for true or false.
		 */
		'boolean': function(column, data, metadata) {
			if(metadata.icon_true || metadata.icon_false) {
				var icon = data ? metadata.icon_true : metadata.icon_false;
				if(!icon) {
					return;
				}
				return this.icon(column, icon);
			}
			var element = jQuery('<span/>').css('color', data ? 'green' : 'grey').text(data ? '✔' : '-');
			this.html(column, element);
		},

		/**
		 * Outputs a reorder icon
		 */
		reorderable: function(column, data, metadata) {
			column.addClass('ui-sortable-handle').data('sort', data);
		},

		/**
		 * Outputs a link
		 */
		url: function(column, data) {
			if(data === null) {
				return;
			}
			if(!jQuery.isArray(data)) {
				data = [data, data];
			}
			jQuery("<a>").attr('href', data[1]).text(this.truncate(data[0])).appendTo(column).bind('click', function(event) {
				event.stopPropagation();
			});
		},

		/**
		 * Outputs an icon.
		 */
		icon: function(column, data, metadata) {
			if(data === undefined) {
				data = metadata.field_name;
			}
			data = jQuery('<div/>').addClass('ui-icon ui-icon-'+data);
			this.html(column, data);
		},

		/**
		 * Insers raw HTML into the cell.
		 */
		html: function(column, data) {
			if(data.constructor === String) {
				data = jQuery(data);
			}
			column.append(data);
		},

		/**
		 * Internal. Truncates text.
		 */
		truncate: function(string, len, pfix) {
			var length = len || 50;
			var postfix = pfix || '…';
			var tolerance = postfix.length+2;
			if(string.length > length+tolerance) {
				return string.substr(0,length)+postfix;
			}
			return string;
		}
	},

	settings: {
		row_hover: true,
		handle_removed_tags: true,
		persist_active_rows: true,
		// false (do not allow row activation on click), "toggle", "activate"
		row_click_active_mode: false,
		// false (many rows can be active at a time), true (activating a row deactivates all others), 'modifiers' (allow multiple selections using modifier keys [cmd to toggle, shift for continuous selections])
		row_click_active_exclusive: true,
		row_click_active_class: 'ui-state-active',
		row_model_drag_and_drop_identifier: false,
		initial_selection: []
	}
};
