Widget.types.document_list_frontend_config = {
	prepare: function() {
		var display_modes = this.getConfigData() || {};
		var config_modes = this.getConfigurationModes();

		this.content = (config_modes['document_categories[]'].length === 0) ? Widget.parseHTML("{{includeTemplate=edit_no_categories}}") : Widget.parseHTML("{{includeTemplate=edit}}");
		var _this = this;
		jQuery.each(config_modes, function(select_name, options) {
			var config_name = select_name.replace(/\[\]$/g, '');
			var select = _this.content.find("select[name='"+select_name+"']").populate(options, display_modes[config_name], (select_name === 'list_template'));
			if(config_name !== 'list_template') {
				select.change(_this.reload_preview.bind(_this));
			}
		});
		this._element.append(this.content);

		this.result_list = jQuery('<ol/>').addClass('ui-editable-items-list');
		this._element.append(this.result_list);

		this.list_label = jQuery('<label/>').addClass('list_label');
		this.list_label.insertBefore(this.result_list);

		this.add_new_item = jQuery('<a/>').addClass('add-new-item').attr('title', "{{writeString=wns.link.create}}");
		this.add_new_item.insertAfter(this.result_list);

		var detail_widget;
		Widget.create('document_detail', function(widget) {
			_this.detail_widget = widget;
			widget.save_callback = _this.reload_preview.bind(_this);
		});

		this.reload_preview();
		this.result_list.on('click', 'li', function() {
			var id = jQuery(this).data('id');
			_this.detail_widget.setDocumentId(id);
			_this.detail_widget.fill_data();
			_this.detail_widget.open();
		});
	},

	reload_preview: function() {
		var _this = this;
		this.result_list.empty();
		this.allDocuments(this._element.serializeArrayKV(), function(files) {
			var count = Object.keys(files).length;
			var label_default_text = "{{writeString=wns.document_list_config.found_documents}}";
			_this.list_label.text(label_default_text + ' (' +count + ')');

			jQuery.each(files, function(i, data) {
				_this.result_list.append(jQuery('<li/>').text(data.value).attr('title', "{{writeString=wns.edit_entry}}").data('id', data.key));
			});
			if(this.notify_size_change) {
				this.notify_size_change();
			}
		});
		_this.add_new_item.click(function(event) {
			Widget.create('document_detail', function(widget) {
				var category_id = _this.category_if_exists();
				if(category_id !== null) {
					widget.settings.initial = {document_category_id: category_id};
					widget._element.find("select[name='document_category_id']").prop('disabled', 'disabled');
				}
				widget.open();
				widget.handle('saved', function() {
					_this.reload_preview();
				});
			});
		});
	},

	save: function() {
		var result = this._element.serializeArrayKV();
		result.document_categories = result.document_categories.filter(Boolean);
		result.tags = result.tags.filter(Boolean);
		return result;
	},

	category_if_exists: function() {
		var category_dropdown = this.content.find("select[name='document_categories[]']");
		var category_id=[];
		if(category_dropdown.length > 0) {
			category_id=category_dropdown.val();
		}
		if(category_id.length === 1) {
			return category_id[0];
		}
		return '';
	},

	additional_buttons: [
		{
			text: '{{writeString=documents.do_admin}}',
			icon: 'wrench',
			action: function(event) {
				var category_id=this.category_if_exists();
				if(category_id !== '') {
					category_id = '#document_category_id=' + category_id[0];
				}
				jQuery.openLink("{{writeLink=documents;manager=AdminManager}}" + category_id, event);
			}

		}
	]
};
