Widget.types['scheduler'] = {
	//called before this._element is available
	initialize: function() {
		var _this = this;
		this.dialog = Widget.parseHTML("{{includeTemplate=dialog}}");

		// Time zone input
		var current_time_zone, time_zone_select, time_zone_widget;

		time_zone_select = this.dialog.find('select[name="timezone"]');
		time_zone_select.prepareWidget(function(widget) {
			time_zone_widget = widget;
			time_zone_widget.handle('value-changed', function(event, tz) {
				var prev_time_zone = current_time_zone;
				current_time_zone = tz;
				_this.recalcDate(_this.dialog.serializeArrayKV(), prev_time_zone, function(newDate) {
					this.dialog.unserialize(newDate);
				});
				_this.updateTimeZone(current_time_zone, function() {
					_this.refresh();
				});
			});
		});
		this.dialog.find('button').button();
		this.dialog.submit(function(event) {
			event.preventDefault();
			_this.addSchedule(_this.dialog.serializeArrayKV(), function() {
				_this.refresh();
			});
		});

		this.timeZone(function(tz) {
			current_time_zone = tz;
			time_zone_select.ensureWidget(function(time_zone_widget) {
				time_zone_widget.val(tz);
			});
			_this.initDate(tz, function(newDate) {
				this.dialog.unserialize(newDate);
			});
		});

		var list = _this.dialog.find('.list');
		Widget.createWithElement('list', function(list) {
			_this.dialog.find('.list').append(list._element);
			_this.list = list;
		}, this.settings.list_widget_session);

		this.dialog.dialog({
			autoOpen: false,
			title: "{{writeString=wns.scheduler.title}}",
			open: function() {
				_this.availableActions(function(actions) {
					var result = {};
					for(var name in actions) {
						result[name] = actions[name].name;
					}
					_this.dialog.find('select[name="action"]').populate(result);
				});
				if(_this.needs_list_reload) {
					_this.needs_list_reload = false;
					_this.list.reload();
				}
			},
			width: 680
		});
	},

	//called when this._element is available
	prepare: function() {
		var _this = this;
		this._element.click(function() {
			_this.dialog.dialog('open');
		});
	},
	
	refresh: function(from_list) {
		this.countScheduled(function(count) {
			this._element[0].dataset.badgeCount = count;
		});
		if(!this.dialog.dialog('isOpen')) {
			this.needs_list_reload = true;
			return;
		}
		this.needs_list_reload = false;
		if(this.list && !from_list) {
			this.list.reload();
		}
	},
	
	settings: {}
};