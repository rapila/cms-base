Widget.types['scheduler'] = {
	//called before this._element is available
	initialize: function() {
		var _this = this;
		this.dialog = Widget.parseHTML("{{includeTemplate=dialog}}");
		this.dialog.find('button').button();
		this.dialog.submit(function(event) {
			event.preventDefault();
			_this.addSchedule(_this.dialog.serializeArrayKV(), function() {
				_this.refresh();
			});
		});

		var time_zone_select = this.dialog.find('select[name="timezone"]');
		var current_time_zone;
		this.timeZones(function(tz) {
			time_zone_select.populate(tz.zones, tz.currentZone);
			current_time_zone = time_zone_select.val();
			_this.initDate(current_time_zone, function(newDate) {
				this.dialog.unserialize(newDate);
			});
		});
		time_zone_select.change(function() {
			var prev_time_zone = current_time_zone;
			current_time_zone = time_zone_select.val();
			_this.recalcDate(_this.dialog.serializeArrayKV(), prev_time_zone, function(newDate) {
				this.dialog.unserialize(newDate);
			});
			_this.updateTimeZone(current_time_zone);
		});

		var list = _this.dialog.find('.list');
		Widget.createWithElement('list', function(list) {
			_this.dialog.find('.list').append(list._element);
			_this.list = list;
		}, this.settings.list_widget_session);
	},

	//called when this._element is available
	prepare: function() {
		var _this = this;
		this._element.click(function() {
			_this.dialog.dialog({
				autoOpen: true,
				title: "{{writeString=wns.scheduler.title}}",
				width: 680
			});
		});
	},
	
	refresh: function(timezone_only) {
		this.countScheduled(function(count) {
			this._element[0].dataset.badgeCount = count;
		});
		if(this.list && !timezone_only) {
			this.list.reload();
		}
		if(!timezone_only) {
			this.availableActions(function(actions) {
				var result = {};
				for(var name in actions) {
					result[name] = actions[name].string;
				}
				this.dialog.find('select[name="action"]').populate(result);
			});
		}
	},
	
	settings: {}
};