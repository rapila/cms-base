Widget.types.page_input = {
	prepare() {
		var _this = this;
		this._element.html('{{includeTemplate=edit}}');
		this._hidden_value_input = this._element.find('input.value').attr('name', this._element.attr('name'));
		this.prepare_filter();
		this.pages(this.settings.include_virtual, function(rootPage) {
			this._root_page = rootPage;
			this._pages_by_id = {};
			function populateIdMap(parents, page) {
				const pagePathItem = [...parents, page];
				_this._pages_by_id[page.page_id] = [...parents, page];
				for(const child of page.children) {
					populateIdMap(pagePathItem, child);
				}
			}
			populateIdMap([], rootPage);
			this.value(this.settings.initial_value);
		});
	},

	is_fuzzy_match(text, query) {
		let startIndex = 0;
		for(const char of query) {
			const index = text.indexOf(char, startIndex);
			if(index === -1) {
				return false;
			}
			startIndex = index + char.length;
		}
		return true;
	},

	prepare_filter() {
		const filter = this._element.find('input.filter');
		const itemList = this._element.find('.items');
		filter.on('input', () => {
			const query = filter.val().toLowerCase().replace(/\s/g, '');
			const items = itemList.children();
			if(!query) {
				items.removeClass('hidden');
			} else {
				items.each((_, child) => {
					child.classList.toggle('hidden', !this.is_fuzzy_match(child.textContent, query));
				});
			}
			if(items.is('.hidden.selected')) {
				// Reset selection if itâ€™s newly hidden
				items.removeClass('selected');
				items.filter(':not(.hidden)')[0].classList.add('selected');
			}
		});
		filter.on('keydown', event => {
			if(!['Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {
				return;
			}
			event.preventDefault();
			const items = itemList.children(':not(.hidden)');
			let selectedItem = items.filter('.selected')[0] || items[0];
			if(!selectedItem) {
				return;
			}
			if(event.key === 'Enter') {
				event.stopPropagation();
				jQuery(selectedItem).click();
			} else {
				let selectedIndex = items.index(selectedItem);
				selectedItem.classList.remove('selected');
				const offset = event.key === 'ArrowDown' ? 1 : -1;
				selectedIndex += offset;
				if(selectedIndex < 0) {
					selectedIndex = items.length - 1;
				}
				if(selectedIndex >= items.length) {
					selectedIndex = 0;
				}
				selectedItem = items[selectedIndex];
				selectedItem.classList.add('selected');
				selectedItem.scrollIntoView();
			}
		});
	},

	render() {
		this._element.find('input.filter').val('');
		this._element.find('.chooser').removeClass('active');
		const pathField = this._element.find('.path').empty();
		for(const pathItem of this._selected_page_path) {
			const div = Widget.parseHTML('{{includeTemplate=path_item}}');
			div.find('.name').text(pathItem.name).on('click', this.value.bind(this, pathItem.page_id));
			div.find('.expander').on('click', event => {
				this.populate_chooser(pathItem);
			});
			pathField.append(div);
		}
	},

	populate_chooser(pathItem) {
		const _this = this;
		const filter = this._element.find('input.filter');
		const chooser = this._element.find('.chooser').addClass('active');
		const query = filter.val();
		const items = chooser.find('.items').empty();
		let populatedFirst = false;
		function addToChooser(parents, item) {
			const itemElement = jQuery('<div/>');
			const name = parents + item.name;
			itemElement.text(name);
			if(query && !_this.is_fuzzy_match(name, query)) {
				itemElement.addClass('hidden');
			} else if(!populatedFirst) {
				itemElement.addClass('selected');
				populatedFirst = true;
			}
			itemElement.on('click', _this.value.bind(_this, item.page_id));
			items.append(itemElement);
			for(const child of item.children) {
				addToChooser(name, child);
			}
		}
		addToChooser('', pathItem);
		filter.focus();
	},

	selected_page() {
		return this._selected_page_path[this._selected_page_path.length-1];
	},
	
	value(set) {
		if(arguments.length) {
			if(!this._root_page) {
				// Special-case before pages have loaded
				this.settings.initial_value = set;
				return set;
			}
			this._selected_page_path = this._pages_by_id[set] ?? [this._root_page];
			this._hidden_value_input.val(this.selected_page().page_id);
			this.render();
			this._element.trigger('change');
		}
		return this.selected_page().page_id;
	},
	
	proxy_url() {
		var value = this.value();
		return "{{writeLink=internal_link_proxy;manager=FileManager}}/"+value;
	},
	
	settings: {
		initial_value: null,
		include_virtual: false
	}
};
