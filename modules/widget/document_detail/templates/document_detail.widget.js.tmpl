Widget.types.document_detail = {
	initialize: function() {
		var _this = this;

		// Handle initial values
		this.handle('saving', function(event, saveData) {
			for(var key in _this.settings.initial) {
				if(key in saveData) {
					continue;
				}
				saveData[key] = _this.settings.initial[key];
			}
		});

		this._element = Widget.parseHTML("{{includeTemplate=edit}}");
		this._element.find('div.hide_if_not_saved').hide();
		this.file_upload = this._element.find("input[name='file_upload']");
		this.upload_file_button = this._element.find('.upload_file').button();
		this.file_upload.change(function() {
			_this.upload_file_button.button('option','disabled', !_this.file_upload.val());
		});
		_this.upload_file_button.click(function() {
			var file = _this.file_upload[0].files[0];
			_this.file_upload.prop('disabled', true);
			_this.uploader.upload_file(file, {document_id: _this.current_detail_id, callback: _this.upload_success.bind(_this), error: _this.upload_error.bind(_this), deny_name_override: !!_this._element.find(":input[name='name']").val()});
			return false;
		});
		this.uploader = Widget.create('file_upload');
		this.current_detail_id = null;
		this.settings.hidden_inputs = this.settings.hidden_inputs.concat(this.settings.is_called_externally ? this.settings.externally_hidden_inputs : []);
		jQuery.each(_this.settings.hidden_inputs, function(i, input_name) {
			var input = _this._element.find(":input[name='" + input_name + "']");
			input.remove();
			_this._element.find("label[for='" + input_name + "']").remove();
		});

		this._element.find(":input[name='document_category_id']").prepareWidget(function(category_widget) {
			category_widget.settings.initial_selection = _this.settings.initial.document_category_id;
			category_widget.settings.show_all = false;
			category_widget.settings.show_without	= true;
		}, jQuery.noop);
		this._element.find(":input[name='language_id']").prepareWidget();
		this._element.find(':input[name=content_created_at]').datepicker({dateFormat: 'dd.mm.yy'});
		this._element.find(':input[name=license]').attr('data-widget-session', _this.settings.popover).prepareWidget(function(popover) {
			popover.handle('popover-chosen', function(event, chosen) {
				popover._element.val(chosen.children('img').data('license'));
			});
		});

		// Tagging
		Widget.createWithElement('tag_area', function(widget) {
			_this.tag_area = widget;
			widget.settings.auto_load = false;
			widget.settings.dnd = false;
			widget.settings.deletable = true;
			widget.setModelName('Document');
			widget.handle('element_set', function(event, element) {
				_this._element.find('div.tags_in_detail').append(element);
			});
		}, jQuery.noop);


		// Upload stuff
		this.uploader = Widget.create('file_upload', function(uploader) {
			_this.uploader = uploader;
			_this.uploader.allow_drag_to(_this._element, null, function(target) {
				return {document_id: _this.current_detail_id, callback: _this.upload_success.bind(_this), error: _this.upload_error.bind(_this), deny_name_override: !!_this._element.find(":input[name='name']").val()};
			}, true);
		});

		this.file_upload.change(function(event) {
			_this.detail_widget.clear_validation();
		});

		// Delete “unsaved” documents on close
		this.handle('saved', function() {
			this.has_been_saved = true;
		});
		this.handle('closing', function(event, should) {
			should.close = this.has_been_saved === null || this.has_been_saved === true;
			if(this.has_been_saved === false) {
				this.delete();
			}
		});

		// Create widget
		Widget.callStatic('detail', 'create_for_instance', this);
	},

	fill_data: function(for_update) {
		if(!for_update) {
			this.has_been_saved = true;
		}
		this.detail_widget.disable();
		this.documentData(function(document_data) {
			this.current_detail_id = document_data.Id;
			
			this._element.find(".preview").text('').addClass('file_exists');
			this.preview(function(result) {
				this._element.find(".preview").html(result);
			});
			if(!for_update) {
				this._element.find(":input[name='name']").val(document_data.Name);
				this._element.find(":input[name='description']").val(document_data.Description);
				this._element.find(":input[name='is_protected']").prop('checked', document_data.IsProtected);
				this._element.find(":input[name='is_inactive']").prop('checked', document_data.IsInactive);
				this._element.find(":input[name='author']").val(document_data.Author);
				this._element.find(":input[name='content_created_at']").val(document_data.ContentCreatedAt);

				this.set_widget_val('document_category_id', document_data.DocumentCategoryId || '');
				this.set_widget_val('language_id', document_data.LanguageId || '');
				this.set_widget_val('license', document_data.License || '');

				this.detail_widget.set_title(this.detail_widget.settings.title = "{{writeString=wns.document}}"+' '+document_data.Name);
			} else if(!this._element.find(":input[name='name']").val()) {
				this._element.find(":input[name='name']").val(document_data.Name);
			}

			this._element.find(".updated_info").text(document_data.UpdatedInfo);
			this._element.find(".created_info").text(document_data.CreatedInfo);
			this._element.find(".detail_id").text(document_data.Id);
			this._element.find(".file_size").text(document_data.FileInfo);
			this._element.find(".original_name").text(document_data.OriginalName === null ? document_data.Name : document_data.OriginalName);
			this._element.find(".ui-download-document").attr({ href: FILE_PREFIX+'/display_document/'+document_data.Id+'?download=true' });
			this._element.find('div.hide_if_not_saved').show();

			if(document_data.Id !== null) {
				this._element.find("label[for='file_upload']").text("{{writeString=wns.document.file_upload_replace}}");
			}

			if(!for_update) {
				this.tag_area.setTaggedItemId(document_data.Id);
				this.tag_area.reload_tags();
			}

			this.detail_widget.enable();
		});
	},
	
	set_widget_val: function(name, value) {
		this._element.find(":input[name='"+name+"']").ensureWidget(function(input_widget) {
			input_widget.val(value);
		});
	},

	upload_error: function(error) {
		this.file_upload.prop('disabled', false);
		if(error && !error.reporting_done) {
			this.detail_widget.validate_with({upload: {string: Widget.parseHTML('<span class="error_display"/>').text(error.message)}});
		}
	},
	
	upload_success: function(result) {
		this.upload_error();
		this.file_upload.val('').change();
		var is_new = this.current_detail_id === null;
		if(is_new) {
			this.has_been_saved = false;
			this.setDocumentId(result);
			this.current_detail_id = result;
		}
		this.fill_data(true);
	},
	
	do_delete: function(callback) {
		var _this = this;
		Widget.confirm('{{writeString=wns.delete_warning_title}}', '{{writeString=wns.document.delete_unsaved}}', function(may_delete) {
			if(may_delete) {
				_this.deleteDocument(function(success) {
					if(success) {
						_this.detail_widget.close();
						_this.close_callback();
					}
					callback(success);
				});
			}
		});
	},
	
	current_detail_id: null,
	has_been_saved: null,

	settings: {
		detail_widget: {
			title: "{{writeString=wns.new_entry}}",
			width: 590
		},
		// Any configuration not present in the save data object will take these values as their defaults
		initial: {
			document_category_id: null
		},
		is_called_externally: false,
		externally_hidden_inputs: ['document_category_id', 'is_protected'],
		hidden_inputs: []
	}
};
