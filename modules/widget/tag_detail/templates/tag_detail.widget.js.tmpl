Widget.types.tag_detail = {
	initialize: function() {
		this._element = Widget.parseHTML("{{includeTemplate=edit}}");
		Widget.callStatic('detail', 'create_for_instance', this);
	},

	init_language_tabs: function() {
		var _this = this;
		Widget.createWithElement('language_tabs', function(widget) {
			widget.handle('element_set', function(event, element) {
				_this._element.find('.translations').append(element);
			});
		}, function(language_tabs) {
			_this.language_tabs = language_tabs;
			language_tabs.handle('tab.created', function(event, language_id, tab_content) {
				tab_content.append(Widget.parseHTML('{{includeTemplate=edit_language}}'));
				tab_content.find("input[name='edited_languages[]']").val(language_id);
				tab_content.find('textarea').val(_this.getTagString(language_id));
			}, false, true);
		});
	},

	fill_data: function() {
		_this = this;
		this.tagData(function(tag_data) {
			this._element.find("input[name='name']").val(tag_data.Name);
			this._element.find(".updated_info").text(tag_data.UpdatedInfo);
			this._element.find(".created_info").text(tag_data.CreatedInfo);
			var tagged_items = this._element.find("ul.tagged_items").empty();
			jQuery.each(tag_data.tagged_models_and_items, function(i, params) {
				var item = jQuery('<li/>').text(params.name+" ("+params.model_name+")");
				var delete_button = jQuery("<span/>").addClass('ui-icon ui-icon-trash').click(function() {
					_this.deleteTaggedItem(tag_data.Id, params.tagged_item_id, params.model_name, function(result) {
						result.removed && item.remove();
						result.model_removed && Widget.fire('tag-models-changed');
					});
				}).appendTo(item);
				tagged_items.append(item);
			});
		});
		if(!this.language_tabs) {
			this.init_language_tabs();
		} else {
			jQuery.each(this.language_tabs.all_panels(), function(language_id, panel) {
				panel.find('textarea').val(_this.getTagString(language_id));
			});
		}
	},

	settings: {
		detail_widget: {
				width: 600
		}
	}
};