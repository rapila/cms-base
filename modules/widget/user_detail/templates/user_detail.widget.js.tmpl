Widget.types.user_detail = {
	initialize: function() {
		var _this = this;
		this._element = Widget.parseHTML("{{includeTemplate=edit}}");
		this._element.find('div.hide_if_not_saved').hide();
		this._element.find(".old_password_elements").hide();
		
		this.settings.detail_widget.additionalButtons.push({
			text: "{{writeString=wns.user.reset_settings}}",
			click: function() {
				_this.resetSettings(function(result) {
					result && Widget.notifyUser(Widget.logSeverity.INFO, '{{writeString=wns.user.reset_settings.reset}}');
				});
			}
		});
		Widget.callStatic('detail', 'create_for_instance', this);
		
		// Rights section
		this.rights_section = this._element.find('div.rights_section').hide();
		this.backend_login_enabled = this._element.find("input[name='is_backend_login_enabled']").prop('checked', true);
		this.admin_login_enabled = this._element.find("input[name='is_admin_login_enabled']").prop('checked', true);
		var is_admin = this._element.find("input[name='is_admin']");
		
		// Rights section should only be shown if permissions are there, or at least without checkboxes
		is_admin.bind('change', function() {
			_this.toggle_rights_section(jQuery(this).prop('checked') === false);
		});

		// Language input
		this._element.find("select[name='language_id']").prepareWidget(function(widget) {
			widget.settings.international_option = false;
			widget.settings.display_in_original_language = true;
			widget.settings.use_admin_languages = true;
		}, jQuery.noop);
		this.rights_section.find("div.user_groups_section").prepareWidget(function(widget) {
			this.user_groups = widget;
		}.bind(this));
		this.rights_section.find("div.roles_section").prepareWidget(function(widget) {
			this.user_roles = widget;
		}.bind(this));
		
		// Suggest passwort
		this._element.find('span.suggest_password').click(function() {
			var input_suggest = _this._element.find('input[name="password_suggest"]');
			var password = '';
			for(var i = 7+Math.floor(Math.random()*7);i>0;i--){
				password += String.fromCharCode((Math.floor(Math.random()*80) % 62) + 40);
			}
			input_suggest.val(password).show().select();
		});
	},

	toggle_rights_section: function(show_roles_groups) {
		this.rights_section[show_roles_groups ? 'show' : 'hide']();
		this.backend_login_enabled.attr('disabled', !show_roles_groups);	
		this.admin_login_enabled.attr('disabled', !show_roles_groups);	
		if(!show_roles_groups) {
			this.backend_login_enabled.prop('checked', true);
			this.admin_login_enabled.prop('checked', true);
		}
	},

	fill_data: function() {
		this._element.find('input[name="password_suggest"]').hide();
		this.userData(function(user_data) {
			var password_section = this._element.find(".hide_if_saved");
			if(!user_data.IsSessionUser) {
				password_section.hide();
				this.toggle_rights_section(!user_data.IsAdmin);
			} else {
				this.rights_section.hide();
				password_section.show();
				this._element.find(".old_password_elements").show();
			}

			this._element.find('.status_section input').prop('disabled', user_data.IsSessionUser);
			this._element.find("input[name='old_password']").val();
			this._element.find("input[name='first_name']").val(user_data.FirstName);
			this._element.find("input[name='last_name']").val(user_data.LastName);
			this._element.find("input[name='username']").val(user_data.Username);
			this._element.find("input[name='email']").val(user_data.Email);
			this._element.find("input[name='password']").val('');
			this._element.find("input[name='password_confirm']").val('');
			this._element.find("input[name='is_inactive']").prop('checked', user_data.IsInactive);
			this._element.find("input[name='is_admin']").prop('checked', user_data.IsAdmin);
			this._element.find(".updated_info").text(user_data.UpdatedInfo);
			this._element.find(".created_info").text(user_data.CreatedInfo);
			this._element.find("span[class='detail_id']").text(user_data.Id);
			this._element.find('div.hide_if_not_saved').show();
			
			this._element.find("select[name='language_id']").ensureWidget(function(language_input) {
				language_input.val(user_data.LanguageId || '');
			});

			this.backend_login_enabled.prop('checked', user_data.IsBackendLoginEnabled);
			this.admin_login_enabled.prop('checked', user_data.IsAdminLoginEnabled);
			this.user_roles.set_checked(user_data.ActiveUserRoleKeys);
			this.user_groups.set_checked(user_data.ActiveUserGroupIds);

			this.detail_widget.set_title(this.detail_widget.settings.title = "{{writeString=wns.user}} "+user_data.FullName);
		});
	},

	settings: {
		detail_widget: {
			title: "{{writeString=wns.new_entry}}",
			width: 600,
			additionalButtons: []
		},
		thumbnail_size: 180,
		initial_category_id: null
	}
};
