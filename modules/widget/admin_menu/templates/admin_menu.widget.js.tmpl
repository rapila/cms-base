Widget.types.admin_menu = {
	prepare: function() {
		this.button_prototype = Widget.parseHTML('{{includeTemplate=menu_button.incl}}');
		this.toolbar = this._element.children();
		this.right_container = this.toolbar.find('.admin_menu_right');
		this.left_container = this.toolbar.find('.admin_menu_left');
		this.activity_indicator = jQuery();
		var _this = this;

		this.moduleConfig(function(module_config) {
			jQuery.each(module_config, function(i, config) {
				var is_right = (i === 'right');
				jQuery.each(config, function(i, config_item) {
					var to_add = null;
					if(_this.predefined_elements[config_item.type] === undefined) {
						Widget.notifyUser(Widget.logSeverity.ALERT, "{{writeParameterizedString=wns.admin_menu.error_user_configuration;element_name=$\{element_name\}}}".replace('${element_name}', config_item.type));
					} else {
						to_add = _this.predefined_elements[config_item.type].apply(_this, config_item.args);
					}
					if(!to_add) {
						return;
					}
					if(to_add.callback) {
						if(to_add.text !== undefined) {
							_this.addButton(to_add.text, to_add.callback, is_right, to_add.element, to_add);
						} else {
							if(_this.settings.attach_events) {
								to_add.element.click(to_add.callback);
							}
							_this.addElement(to_add.element, is_right);
						}
					} else {
						if(to_add.text) {
							_this.addButton(to_add.text, jQuery.noop, is_right, to_add.element, to_add);
						} else {
							_this.addElement(to_add.element, is_right);
						}
					}
				});
			});
			Widget.handle('rapila-logged_in', this.show.bind(this), true, true);
		});
	},

	activity: function() {
		this.activity_indicator.data('usage', this.activity_indicator.data('usage')+1);
		this.activity_indicator.css({display: ''});
	},

	end_activity: function() {
		this.activity_indicator.data('usage', this.activity_indicator.data('usage')-1);
		if(this.activity_indicator.data('usage') <= 0) {
			this.activity_indicator.hide();
		}
	},

	show: function() {
		this._element.show();
	},

	hide: function() {
		this._element.hide();
	},

	addElement: function(element, is_right_container) {
		var appendee = this.left_container;
		if(is_right_container) {
			appendee = this.right_container;
		}
		jQuery(element).appendTo(appendee);
		return this;
	},

	addButton: function(text, callback, is_right_container, element, attributes) {
		if(!element) {
			element = this.button_prototype.clone();
		}
		attributes = attributes || {};
		if(attributes.is_active) {
			element.addClass('ui-state-active');
		}
		if(!text) {
			text = '';
		}
		element.find('.ui-button-text').text(text);
		if(this.settings.attach_events) {
			element.click(callback);
		}
		return this.addElement(element, is_right_container);
	},

	addSpacer: function(width, is_right_container) {
		return this.addElement(Widget.parseHTML('<span style="display:inline-block;width:'+width+'px;"/>'), is_right_container);
	},

	settings: {
		attach_events: true
	},

	predefined_elements: {
		activity: function() {
			this.activity_indicator = jQuery('<img/>').attr({src: "{{writeDirectInclude=admin/activity_indicator.svg;template=location_only}}"}).addClass('activity_indicator').data('usage', 0).hide();
			return {element: this.activity_indicator};
		},

		select: function(items) {
			var _this = this;
			var result = {};
			result.element = jQuery('<select/>');
			var current_module = AdminInterface.current_admin_module;
			var default_title = '{{writeString=wns.module_select.default_option.title}}';
			// todo: remove checked or style when no option is selected
			result.element.append(jQuery('<option/>').text(default_title).addClass('default_option default'));
			var separator_class = '';
			var active_val = false;
			jQuery.each(items, function(i, item) {
				if(item.type === 'spacer') {
					//handle Separator
					separator_class = 'separator_top';
					return;
				}

				var item_contents = _this.predefined_elements[item.type].apply(_this, item.args);
				if(!item_contents) {
					return;
				}
				var value = item.args[0];
				var option = jQuery('<option/>').text(item_contents.text).attr('value', value).addClass(separator_class);
				option.data('action', item_contents.callback);
				if(item_contents.is_active) {
					active_val = value;
				}
				result.element.append(option);
				separator_class = '';
			});
			if(active_val) {
				result.element.val(active_val);
				result.element.addClass('ui-state-active');
			}
			if(this.settings.attach_events) {
				result.element.bind('change', function(event) {
					var selected = jQuery(this).find(':selected');
					if(!jQuery.isFunction(selected.data('action'))) {
						result.element.addClass('inactive');
						return false;
					}
					result.element.removeClass('inactive');
					selected.data('action')(event);
				});
			}
			result.callback = jQuery.noop;
			return result;
		},

		spacer: function(width) {
			return {element: Widget.parseHTML('<span style="display:inline-block;width:'+width+'px;"/>')};
		},

		module: function(module, module_info) {
			var result = {};
			if(AdminInterface.current_admin_module === module) {
				result.is_active = true;
			} else {
				result.callback = jQuery.openLink.bind(window, module_info.link);
			}
			result.text = module_info.name;
			result.element = this.button_prototype.clone();
			result.element.addClass('module_link '+module);
			result.element.attr('title', module_info.title||module_info.name);
			if(module_info['class']) {
				result.element.addClass(module_info['class']);
			}
			return result;
		},

		languages: function() {
			var select = jQuery('<select/>').addClass('content_language').attr('data-widget-type', 'language_input');
			var _this = this;
			select.prepareWidget(function(widget) {
				widget.settings.international_option = false;
			}, function(widget) {
				if(_this.settings.attach_events) {
					select.change(function() {
						widget.setContentLanguage(select.val());
						AdminInterface.content_language = select.val();
						Widget.fire('rapila-language_changed', select.val());
					});
				}
				widget.handle('prepared', function() {
					select.val(window.AdminInterface.content_language);
				});
				Widget.handle('rapila-language_changed', function(event, language) {
					select.val(language);
				});
			});
			return {element: select, callback: jQuery.noop};
		},

		domain_name: function() {
			return {element: jQuery("<span/>").text('{{writeSettingValue=name;section=domain_holder}}').attr('class', "domain_name")};
		},

		tag: function() {
			var element = jQuery('<button/>').addClass('open-tag-panel rapila-icon').text('tags');
			element.button();
			var title = "{{writeString=wns.tag_panel.button_title}}"
			if(title) element.attr('title', title);
			return {element: element, callback: function(event) {
				Widget.create('tag_panel', function(tag_panel) {
					tag_panel.settings.panel_style = {width: '300px'}
				}, function(tag_panel) {
					tag_panel.toggle_at({right: '0px', top: '65px', bottom: '63px'}, 'right');
					element.toggleClass('open' ,tag_panel.settings.is_open);
				});
			}};
		},

		user: function(user_info) {
			var _this = this;
			return {text: user_info.FullName+"{{writeString=wns.admin_menu.my_profile_postfix}}", callback: function() {
				var _element = this;
				Widget.create('user_detail', function(widget) {
					widget.setUserId(user_info.Id);
					widget.fill_data();
					widget.open();
					widget.save_callback = function() {
						jQuery(_element).find('.ui-button-text').text(_this.getUserInfo()['FullName']);
					};
				});
			}};
		},

		clear_caches: function() {
			var _this = this;
			return {text: "{{writeString=wns.admin_menu.clear_caches}}", callback: function() {
				_this.clearCaches();
			}};
		},

		reset_user_settings: function() {
			var _this = this;
			return {text: "{{writeString=wns.admin_menu.reset_user_settings}}", callback: function() {
				_this.resetUserSettings();
			}};
		},

		menu: function(items, icon) {
			var _this = this;
			var menu = jQuery('<ul/>');
			jQuery.each(items, function(i, item) {
				if(item.type === 'spacer') {
					return;
				}
				var item_contents = _this.predefined_elements[item.type].apply(_this, item.args);
				if(!item_contents) {
					return;
				}
				// FIXME: When upgrading to jQuery UI 1.11 or later, lose the <a> tag. Also in admin-ui.styl
				menu.append(jQuery('<li/>').append(jQuery('<a/>').addClass('ui-menu-item').text(item_contents.text)).data('callback', item_contents.callback));
			});
			menu.appendTo(document.body).css({
				zIndex: 101,
				position: 'absolute',
				display: 'table'
			}).menu({
				select: function(event, ui) {
					menu.hide();
					ui.item.data('callback')(event);
				}
			}).hide();
			var element = jQuery('<button/>').addClass('open-action rapila-icon').text(icon);
			element.button();
			return {element: element, callback: function(event) {
				if(menu.is(':visible')) {
					menu.hide();
				} else {
					menu.css({
						display: 'table'
					}).position({
						my: "right top",
						at: "center bottom",
						of: element
					});
				}
			}};
		},

		documentation: function() {
			var _this = this;
			var element = jQuery('<button/>').addClass('open-documentation rapila-icon').text('info');
			element.button();
			var key;
			if(window.PreviewInterface && window.PreviewInterface.page_type) {
				key = 'page_type.'+window.PreviewInterface.page_type;
			} else {
				key = 'admin.'+window.AdminInterface.current_admin_module;
			}
			this.documentationExists(key, function(exists) {
				element.button('option', 'disabled', !exists);
			});
			return {element: element, callback: function(event) {
				_this.documentationData(key, function(data) {
					var content = data.content;
					content = '<h2><a href="'+data.url+'">' + data.title + '</a></h2>' + content;
					Widget.notifyUser(Widget.logSeverity.DOCUMENTATION, content, {
						closeDelay: null,
						identifier: 'documentation-'+key,
						closable: true,
						hideIcon: true,
						isHTML: true,
					});
				});
			}};
		},

		logo: function() {
			return {element: jQuery("<span/>").text('rapila').addClass("rapila_logo")};
		},

		preview: function() {
			var _this = this;
			var result = {};
			result.is_active = !!window.PreviewInterface;
			result.text = 'preview';
			result.element = this.button_prototype.clone().addClass('preview rapila-icon').attr('title', '{{writeString=wns.page.preview_linktext}}');
			result.callback = function(event) {
				jQuery.openLink(_this.getPreviewLink(), event);
			};
			return result;
		},

		logout: function(page_link) {
			var _this = this;
			var result = {};
			result.callback = function() {
				Widget.create('login_window', function(login_window) {
					login_window.logout(function() {
						window.location.href = page_link;
					});
					this.hide();
				}.bind(this));
			}.bind(this);
			result.text = 'power';
			result.element = this.button_prototype.clone().addClass('logout_link rapila-icon').attr('title', '{{writeString=wns.logout}}');
			return result;
		}
	}
};
