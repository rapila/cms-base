Widget.types.tree = {
	prepare: function() {
		var _this = this;
		this.settings.tag_name = this.settings.tag_name || (this._element.is('ul') ? 'ul' : 'ol');

		// Model drag & drop
		if(this.settings.init_dnd) {
			this.settings.model_name = this.getModelName();
			if(this.settings.model_name) {
				this.dnd = Widget.create('model_drag_and_drop');
			}
		}

		this._element.jstree({
			plugins: ['dnd', 'unique', 'state'],
			core: {
				data: this.load_item.bind(this),
				check_callback: function(operation, node, parent, position, more) {
					if(operation === 'copy_node') {
						return false;
					}
					var src_data = node.data;
					if(!_this.settings.may_move_item(src_data)) {
						return false;
					}
					debugger;
					var dest_data = data.r !== -1 && data.r.data('jstree');
					if(!dest_data || !data.p) {
						return false;
					}
					var result = false;
					if(data.p === 'inside' || data.p === 'first' || data.p === 'last') {
						result = _this.settings.may_create_child(dest_data);
					} else {
						result = _this.settings.may_create_sibling(dest_data);
					}
					return result;
				},
				multiple: false,
				force_text: true,
			},
			state: {
				key: this.name+'|'+this.settings.key+'|'+(this.settings.model_name || ''),
				preserve_loaded: true,
			},
			dnd: {
				copy: false,
				is_draggable: function(node) {
					return _this.settings.may_move_item(node[0].data);
				},
				use_html5: false
			}
		});

		this._tree = jQuery.jstree.reference(this._element);

		// Item click handler
		this._element.on('select_node.jstree', function(event, info) {
			// Open it
			_this._tree.open_node(info.node);
			// Select it
			_this.activate(info.node.data);
		});

		this._element.on('move_node.jstree', function(node, parent, position) {
			debugger;
			_this.moveItem(node.data.id, parent.data.id, position, function(res, error) {
				if(error) {
					_this.reload();
				}
			}, WidgetJSONOptions.with_callback_handles_error(false));
		}).on('refresh.jstree', function(event, data) {
			if(_this.current_element_identifier) {
				_this._tree.select_node(_this.current_element_identifier);
			}
		});
		// this.reload();
	},

	reload: function() {
		this._tree.refresh();
	},

	load_item: function(item, success) {
		var _this = this;
		var id = item.id;
		if(id === '#') {
			// Root item
			id = null;
		}
		this.listChildren(id, function(children) {
			var result = children.map(function(child) {
				var has_children = _this.settings.has_children(child);
				return {
					id: _this.settings.identifier_from_data(child),
					text: _this.settings.description_from_item(child),
					icon: (_this.settings.icons_from_item(child) || []).join(' '),
					state: {
						opened: has_children && _this.settings.is_open(child),
						selected: _this.settings.is_active(child),
						loaded: false,
					},
					has_children: has_children,
					data: child
				};
			});
			success(result);
		});
	},

	activate: function(data) {
		var new_identifier = this.settings.identifier_from_data(data);
		var has_changed = this.current_element_identifier !== new_identifier;
		this.current_element_identifier = new_identifier;
		this.fire('tree_item-activated', data, new_identifier, has_changed);
	},

	parent_of: function(id) {
		return this._tree.get_parent(id);
	},

	remove_element_with_identifier: function(id) {
		this._tree.remove(id);
	},

	current_element: function() {
		return this._element.find('li.ui-state-active');
	},

	all_pages: function() {
		return jQuery('#admin_sidebar').find('li');
	},

	/**
	* Reloads the children of a given element (li) as well as its properties.
	* The item retains its open/closed state (except if true is passed for the `open` argument, in which case it is opened)
	* @param element the element to reload
	*/
	reload_element: function(id, open) {
		this._tree.refresh_node(id);
		if(open) {
			this._element.one('refresh_node.jstree', function() {
				this._tree.open_node(id);
			}.bind(this));
		}
	},

	update_elements: function() {
		this._tree.refresh();
	},

	current_element_identifier: null,

	settings: {
		key: 'tree',
		description_from_item: jQuery.noop,
		has_children: jQuery.noop,
		may_create_child: jQuery.noop,
		may_create_sibling: jQuery.noop,
		may_move_item: jQuery.noop,
		identifier_from_data: jQuery.noop,
		is_open: jQuery.noop,
		is_active: jQuery.noop,
		custom_class: jQuery.noop,
		allow_reorder: jQuery.noop,
		icons_from_item: jQuery.noop,
		init_dnd: false
	}
};
