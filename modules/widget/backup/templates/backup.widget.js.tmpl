Widget.types.backup = {
	prepare: function() {
		var _this = this;
		this._element.append(Widget.parseHTML("{{includeTemplate=backup}}"));

		//Backup files and
		this.backup_file = this._element.find('select[name="backup_file"]');
		
		var restorer = this._element.find('button.load_from_file').button({disabled: true});
		var deleter = this._element.find('button.delete_file').button({disabled: true});
		this.backup_file.change(function() {
			restorer.button('option', 'disabled', !jQuery.trim(jQuery(this).val()));
			deleter.button('option', 'disabled', !jQuery.trim(jQuery(this).val()));
		});
		
		this.reload_backup_files();
		
		//Restore from backup
		restorer.click(function() {
			restorer.button('option', 'disabled', true);
			Widget.load();
			_this.loadFromBackup(_this.backup_file.val(), function(count) {
				Widget.end_load();
				if(arguments[1]) {
					return;
				}
				Widget.confirm('{{writeString=module.widget.backup}}', AdminInterface.strings.get_string('wns.backup.loader.load_success', {query_count: count}), function() {
					window.location.href = window.location.href;
				}, null, '{{writeString=wns.reload}}');
			});
		});
		
		//Delete file
		deleter.click(function() {
			deleter.button('option', 'disabled', true);
			var file_name = _this.backup_file.val();
			var delete_message = AdminInterface.strings.get_string('wns.backup.delete_warning', { detail_name: file_name});
			Widget.confirm("{{writeString=wns.delete_warning_title}}", delete_message, function(confirmed) {
				if(confirmed) {
					_this.deleteBackupFile(file_name, function(result) {
						if(result) {
							_this.reload_backup_files(true);
						} else {
							Widget.notifyUser(Widget.logSeverity.ALERT, '{{writeString=wns.backup.error_with_unlink}}');
						}
					});
				} else {
					deleter.button('option', 'disabled', !jQuery.trim(jQuery(_this.backup_file).val()));
				}
			}.bind(this));
		});
		
		//Save
		this.dumper = this._element.find('.dump_to_file button').button({disabled: true});
		var file_name = this._element.find('input[name="file_name"]');
		var dumptool = this._element.find('input[name="dumptool"]');
		dumptool.focus(function() {
			dumptool.addClass('dumpfocus');
		}).blur(function() {
			dumptool.removeClass('dumpfocus');
		});
		this._element.find('input').change(function() {
			_this.dumper.button('option', 'disabled', !(jQuery.trim(file_name.val()) && jQuery.trim(dumptool.val())));
		});
		this.backupInfo(function(info) {
			file_name.val(info.suggested_backup_name);
			if(info.mysql_dump_tool) {
				dumptool.val(info.mysql_dump_tool);
			} else {
				Widget.notifyUser(Widget.logSeverity.INFO, '{{writeString=wns.backup.mysqldump_missing}}');
				dumptool.addClass('dumpfocus');
			}
			this._element.find('label[for="file_name"]').attr('title', "{{writeString=wns.backup.path_to_export_file}}: "+info.backup_dir);
			file_name.change();
		});
		
		this.dumper.click(function() {
			_this.dumper.button('option', 'disabled', true);
			_this.backupToFile(file_name.val(), dumptool.val(), function(message) {
				_this.changed_dashboard_config();
				if(message !== undefined) {
					Widget.confirm('{{writeString=module.widget.backup}}', '{{writeString=wns.backup.exporter.export_success}} '+message, jQuery.noop, null);
				}
			});
		});
	},
	
	reload_backup_files: function(reload) {
		this.possibleRestoreFiles(function(files) {
			if(files.length === 0) {
				files = {'' : "{{writeString=wns.backup.no_files_available}}"};
			}
			var _this = this;
			this.backup_file.empty();
			setTimeout(function(){ 
				_this.backup_file.populate(files).change();
				var backup_size = _this.getBackupDirSize();
				var backup_size_display = _this._element.find('span.backup_dir_size').text(backup_size.formatted);
				if(backup_size.integer > _this.settings.backup_storage_limit_warning) {
					backup_size_display.addClass('attention');
				} else {
					backup_size_display.removeClass('attention');
				}
			}, reload ? 100 : 0);			
		});
	},
	
	changed_dashboard_config: function() {
		//Simple way to reload
		this._element.empty();
		this.prepare();
	},
	
	save_callback: function(data) {
		//Do nothing
	},

	settings: {
		backup_storage_limit_warning: 1000000000
	},
	
	close: function() {
		this.detail_widget.close();
	}
	
};