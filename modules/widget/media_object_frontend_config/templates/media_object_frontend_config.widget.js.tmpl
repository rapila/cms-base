Widget.types.media_object_frontend_config = {
	prepare: function() {
		var _this = this;
		var deferred = jQuery.Deferred();
		_this.currentData(deferred);

		Widget.createWithElement('document_input', function(widget) {
			widget.settings.default_value_label = '{{writeString=wns.media_object.use_url}}';
		}, function(widget) {
			_this.document_input = widget._element;

			widget.handle('reloaded', function() {
				//Update values on load (depends on a populated document_input)
				deferred.then(function(data) {
					if(!data || !data.length) {
						return _this.add_entry();
					}
					jQuery.each(data, function(key, value) {
						_this.add_entry(value);
					});
				});
			}, true, true);
		});
		this.preview = this._element.find('.preview');
		this.config = this._element.find('.config');
		this.entry_prototype = Widget.parseHTML('{{includeTemplate=entry}}');
		this._element.find('a').on('click', function(event) {
			_this.add_entry();
		});
		this._element.on('change', "input[name='url[]']", function() {
			var url_input = jQuery(this);
			var media_entry = url_input.closest('.media_entry');
			if(!url_input.val()) {
				return;
			}
			if(url_input.val().indexOf('<') === 0) {
				var elements = jQuery('<div/>').html(url_input.val());
				var url = _this.find_param(elements, 'src');
				if(!url) {
					url = _this.find_param(elements, 'href');
				}
				if(url) {
					url_input.val(url);
					var width = _this.find_param(elements, 'width');
					if(width) {
						media_entry.find("input[name='width[]']").val(width);
					}
					var height = _this.find_param(elements, 'height');
					if(height) {
						media_entry.find("input[name='height[]']").val(height);
					}
					var mimetype = _this.find_param(elements, 'type');
					media_entry.find("input[name='mimetype[]']").val(mimetype || '');
				}
			}
		}).on('change', "select[name='document_id[]'], input[name='url[]']", function() {
			var media_entry = jQuery(this).closest('.media_entry');
			_this.update_visibilities(media_entry);
			var mimetype_input = media_entry.find("input[name='mimetype[]']");
			_this.mimetypeFor(media_entry.find("select[name='document_id[]']").val(), media_entry.find("input[name='url[]']").val(), function(type) {
				if(type) {
					mimetype_input.val(type);
					_this.update_preview();
				}
			});
		}).on('change', 'input, select', function() {
			_this.update_preview();
		}).on('click', '.delete_media', function() {
			var media_entry = jQuery(this).closest('.media_entry');
			media_entry.remove();
			if(_this.config.find('.media_entry').length === 0) {
				_this._element.find("span.default_message").show();
			}
			_this.update_preview();
		});
	},

	find_param: function(elements, param) {
		var value = elements.find('*['+param+']').attr(param);
		if(!value) {
			value = elements.find("param[name='"+param+"']").attr('value');
		}
		return value;
	},

	add_entry: function(data) {
		this._element.find("span.default_message").hide();
		var new_entry = this.entry_prototype.clone();
		new_entry.find("label[for='document_id[]']").after(this.document_input.clone().attr('name', 'document_id[]'));
		this.config.append(new_entry);
		if(data) {
			if(data.document_id) {
				new_entry.find("select[name='document_id[]']").val(data.document_id);
			} else {
				new_entry.find("select[name='document_id[]']").val(data.url);
			}
			if(!new_entry.find("select[name='document_id[]']").val()) {
				new_entry.find("input[name='url[]']").val(data.url);
			}
			new_entry.find("input[name='height[]']").val(data.height);
			new_entry.find("input[name='width[]']").val(data.width);
			new_entry.find("input[name='mimetype[]']").val(data.mimetype);
			this.update_preview();
			this.update_visibilities(new_entry);
		}
		return new_entry;
	},

	update_visibilities: function(media_entry) {
		var document_select = media_entry.find("select[name='document_id[]']");
		var url_input = media_entry.find("input[name='url[]']");

		var document_group = media_entry.find('.group_fields.document_id');
		var url_group = media_entry.find('.group_fields.url');
		var mimetype_group = media_entry.find('.group_fields.mimetype');

		if(url_input.val()) {
			document_group.hide();
		} else {
			document_group.show();
		}
		if(!document_select.val()) {
			url_group.show();
			mimetype_group.show();
		} else if(isNaN(document_select.val())) {
			url_group.hide();
			mimetype_group.show();
		} else {
			url_group.hide();
			mimetype_group.hide();
			media_entry.find("input[name='mimetype[]']").val('');
		}
	},

	update_preview: function() {
		this.renderPreview(this._element.serializeArrayKV(), function(result) {
			this.preview.empty().append(Widget.parseHTML(result));
		});
		if(this.notify_size_change) {
			this.notify_size_change();
		}
	},

	save: function() {
		return this._element.serializeArrayKV();
	},

	additional_buttons: [
		{
			text: '{{writeString=documents.do_admin}}',
			icon: 'wrench',
			action: jQuery.openLink.bind(window, "{{writeLink=documents;manager=AdminManager}}")
		}
	]
};
