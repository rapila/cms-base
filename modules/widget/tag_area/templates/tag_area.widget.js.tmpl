Widget.types.tag_area = {
	prepare: function() {
		var _this = this;
		this.tag_mapping = {};
		this._element.addClass('tag_area');
		if(this.settings.drop_zone === null) {
			this.settings.drop_zone = this.getModelName();
		}
		var default_text = "{{writeString=tag_area.item_is_not_tagged}}";
		if(this.settings.drop_zone === null) {
			default_text = "{{writeString=tag_area.has_no_tags}}";
		}
		this._element.append(jQuery('<div/>').addClass('no_tags_message').text(default_text));
		if(this.settings.dnd || this.settings.drop_zone) {
			this.dnd = Widget.create('model_drag_and_drop');
			this.dnd.handle('model_drag_and_drop-tagged', function(event, dragged_model, dragged_item_id, model_name, item_id) {
				if(model_name === (_this.settings.drop_zone || _this.getModelName()) && item_id === _this.getTaggedItemId()) {
					_this.reload_tags();
				}
			});
		}

		if(this.settings.auto_load) {
			this.reload_tags();
		}
		Widget.handle('tag-saved', this.reload_tags.bind(this));
	},

	reload_tags: function() {
		var _this = this;
		this.tag_mapping = {};
		this.listTags(window.AdminInterface.current_admin_module, function(all_tags) {
			this._element.find('.tag').remove();
			this._element.removeClass('has_tags');
			jQuery.each(all_tags, function(i, tag) {
				_this.append_tag(tag);
			});
		});
		if(this.settings.drop_zone) {
			this.dnd.init_dnd(this._element, this.settings.drop_zone, this.getTaggedItemId(), true);
		}
	},

	append_tag: function(name, display_name) {
		var _this = this;
		if(!display_name) {
			display_name = name;
		}
		if(name in this.tag_mapping) {
			// Tag exists already
			return;
		}
		var tag = jQuery('<span/>').addClass('tag');
		this.tag_mapping[name] = tag;
		
		tag.data('tagName', name);
		if(this.dnd) {
			this.dnd.init_dnd(tag, "Tag", name);
		}
		tag.append(jQuery('<span/>').addClass('tag_start').text(' '));
		tag.append(jQuery('<span/>').addClass('tag_repeat').text(display_name));
		var end = jQuery('<span/>').addClass('tag_end').text(' ');
		if(this.settings.deletable) {
			end.addClass('deletable');
			end.click(this.delete_tag.bind(this, tag));
			end.text(' ✗');
		}
		tag.append(end);
		tag.appendTo(this._element);
		tag.bind('dblclick', function() {
			_this.tagId(name, function(id) {
				if(id !== null) {
					Widget.create('tag_detail', function(tag_detail) {
						tag_detail.setTagId(id);
						tag_detail.auto_open = true;
					}, function(tag_detail) {
						tag_detail.fill_data();
					});
				}
			});
		});
		this._element.append(document.createTextNode(' '));
		this._element.addClass('has_tags');
	},

	delete_tag: function(tag) {
		var name = tag.data('tagName');
		this.deleteTag(name, function(result) {
			if(result) {
				tag.remove();
				if(!this._element.find('.tag').length) {
					this._element.removeClass('has_tags');
				}
				Widget.fire('rapila-tag-removed', name, result);
				Widget.fire('rapila-tag-removed-from-'+result.model_name, result);
			}
		});
		return false;
	},

	set_prefix_match(prefix) {
		var matching = Object.keys(this.tag_mapping)
			.map(name => [name, this.tag_mapping[name]])
			.map(([name, tag]) => (tag.removeClass('matching'), [name, tag]))
			.filter(([name]) => prefix && name.indexOf(prefix) === 0)
			.forEach(([_, tag]) => tag.addClass('matching'));
	},

	settings: {
		auto_load: true,
		dnd: true,
		drop_zone: null,
		deletable: false
	}
};