Widget.types.page_detail = {
	prepare: function() {
		var _this = this;
		this.protector = new UnsavedChanges(this._element);
		this.accordion = jQuery(this._element.find('div.accordion')).accordion({active: this.settings.active_accordion, autoHeight: false, clearStyle: true}).bind('accordionbeforeactivate', function(event, ui) {
			_this.setActiveAccordion(ui.options.active);
			if(ui.newPanel.is('.contents_container')) {
				_this.load_content(ui.newPanel);
			} else if(ui.newPanel.is('.configuration_container')) {
				_this.load_configuration(ui.newPanel);
			}
		});
		
		//Init buttons
		var buttons = this._element.find('.page_detail_controls');
		buttons.find(':button').button();
		buttons.find('[name=save]').addClass('primary ui-state-active').click(function() {
			_this.save();
			return false;
		});
		buttons.find('[name=cancel]').click(function() {
			_this.protector.release();
			_this.load_page(_this.current_page_id);
			_this.enable_input();
			return false;
		});
		this.delete_button = buttons.find('[name=delete]').click(function() {
			_this.protector.release();
			Widget.confirm("{{writeString=wns.delete_confirm}}", "{{writeParameterizedString=wns.page.delete_alert;name=$\{name\};}}".replace(/\$\{name\}/, _this.current_page_name()), function(confirmed) {
				if(confirmed) {
					_this.delete_page();
				}
			});
			return false;
		});
		
		this.description_has_been_loaded = false;
		this.configuration_has_been_loaded = false;
		this.current_page_id = null;
		
		// templates
		var option = jQuery('<option/>');
		var template_select = this._element.find("select[name='template_name']");
		template_select.change(function() {
			_this.save();
		});
		jQuery.each(this._staticMethods.getFrontendTemplates(), function(i, template) {
			option.clone().text(template.name).attr('value', template.value).addClass(template.is_default ? 'default' : '').appendTo(template_select);
		}.bind(this));
		var page_type_select = this._element.find("select[name='page_type']");
		jQuery.each(this.getPageTypes(), function(i, page_type) {
			option.clone().text(page_type.name).attr('value', page_type.value).appendTo(page_type_select);
		}.bind(this));
		this.canonical_id_dropdown = this._element.find("select[name='canonical_id']").prepareWidget(function(widget) {
			widget.settings.default_value_label = '-------';
		}, jQuery.noop);
		Widget.callStatic('detail', 'clickable_labels_for', this._element);
	},
	
	validate_with: function(exception) {
		Widget.callStatic('detail', 'validate_with', exception, this._element);
	},
	
	disable_input: function() {
		this.inputs_enabled = false;
		this._element.find(':input, :button').prop('disabled', true).filter(':button').button('disable');
	},
	
	enable_input: function(enable_delete) {
		if(enable_delete !== undefined) {
			this.enable_delete_button = enable_delete;
		}
		this.inputs_enabled = true;
		this._element.find(':input, :button').not(this.delete_button).prop('disabled', false).filter(':button').button('enable');
		this.delete_button.prop('disabled', !this.enable_delete_button).button(this.enable_delete_button ? 'enable' : 'disable');
	},

	enable_delete: function() {
		this.enable_delete_button = true;
		this.delete_button.prop('disabled', false).button('enable');
	},

	accordion_active: function() {
		var accordion_headers = this._element.find('div.accordion h3');
		var result = null;
		accordion_headers.each(function(i, element) {
			element = jQuery(element);
			if(element.is('.ui-state-active')) {
				result = element;
				return false;
			}
		});
		return result;
	},
	
	load_page: function(page_id) {
		this.protector.warn(function(ok) {
			if(!ok) {
				//TODO: Reset tree
				return;
			}
			this.fire('loading', page_id);
			this.description_has_been_loaded = false;
			this.configuration_has_been_loaded = false;
			this.setPageId(page_id);
			this.fill_data();
			var active_accordion_title = this.accordion_active();
			var contents_container = this._element.find('div.accordion .contents_container');
			var configuration_container = this._element.find('div.accordion .configuration_container');
			contents_container.empty();
			if(active_accordion_title.next().is('.contents_container')) {
				this.load_content(contents_container);
			}
			configuration_container.empty();
			if(active_accordion_title.next().is('.configuration_container')) {
				this.load_configuration(configuration_container);
			}
			this.fire('loaded', page_id);
		}.bind(this));
	},

	load_content: function(container) {
		var _this = this;
		if(this.current_page_id === null || this.description_has_been_loaded === true) {
			return;
		}
		this.description_has_been_loaded = true;
		var active_languages = this.getActiveLanguages();
		Widget.createWithElement('language_tabs', function(widget) {
			widget.settings.active_languages = active_languages;
			widget.handle('element_set', function(event, element) {
				container.append(element);
			});
		}, function(language_tabs) {
			language_tabs.handle('tab.created', function(event, language_id, tab_content) {
				tab_content.append(Widget.parseHTML('{{includeTemplate=edit_language}}'));
				var language_data = _this.getLanguageData(language_id);
				tab_content.find('label.validate-page_title_required_language_id').removeClass('validate-page_title_required_language_id').addClass('validate-page_title_required_'+language_id);
				tab_content.find("input[name='edited_languages[]']").val(language_id);
				tab_content.find("input[name='link_text[]']").val(language_data.LinkTextOnly);
				tab_content.find("input[name='meta_description[]']").val(language_data.MetaDescription);
				tab_content.find("input[name='meta_keywords[]']").val(language_data.MetaKeywords);
				tab_content.find("input[name='is_active[]']").prop('checked', !language_data.IsInactive);
				tab_content.find("input[name='page_title[]']").val(language_data.PageTitle);
				tab_content.find(':input, :button').prop('disabled', !_this.inputs_enabled);
			}, false, true);
		});
	},
	
	load_configuration: function(container) {
		var _this = this;
		if(this.current_page_id === null || this.configuration_has_been_loaded === true) {
			return;
		}
		// empty container, so when page type is changed, ie from default to journal then filled modules are not displayed anymore
		container.empty();
		
		var new_type = _this._element.find("select[name='page_type']").val();
		
		container[0].className = container[0].className.replace(/\bpage-type-[^\s$]+/g, '')+' page-type-'+new_type;
		
		this.configuration_has_been_loaded = true;
		this.current_page_type = null;

		Widget.create('page_type', function(page_type) {
			//	Intermediate callback
			_this.current_page_type = page_type;
			
			page_type.settings.page_type = new_type;
			page_type.settings.container = container;
			page_type.settings.page_id = _this.current_page_id;
			page_type.settings.active_languages = _this.getActiveLanguages();
		}, function(page_type) {
			page_type.handle_admin();
		});
	},

	
	fill_data: function() {
		Widget.callStatic('detail', 'clear_validation', this._element);
		var _this = this;
		var page_data = this.getPageData();
		this.current_page_id = page_data.Id;
		this._element.find("input[name='name']").val(page_data.Name);
		this._element.find("input[name='global_is_active']").prop('checked', !page_data.IsInactive);
		this._element.find("input[name='is_folder']").prop('checked', page_data.IsFolder);
		this._element.find("input[name='is_hidden']").prop('checked', page_data.IsHidden);
		this._element.find("input[name='is_protected']").prop('checked', page_data.IsProtected);
		this.canonical_id_dropdown.val(page_data.CanonicalId == null ? "" : page_data.CanonicalId);
		this._element.find("select[name='template_name']").val(page_data.TemplateName == null ? "" : page_data.TemplateName);
		this._element.find("select[name='page_type']").val(page_data.PageType == null ? "" : page_data.PageType).change(function() {
			_this.configuration_has_been_loaded = false;
		});
		this._element.find(".page_href").text(page_data.PageLink).attr('href', page_data.PageHref);
		this.delete_button.prop({title: page_data.DeleteNotPermitted});
		// references
		var count_references = page_data.CountReferences;
		var count_text = count_references > 0 ? " ("+count_references+")" : '';
		if(count_references == 0) {
			this._element.find(".page_references").remove();
		} else {
			this._element.find(".references_count").text(count_text);
		}

		// page_properties
		var page_properties_container = this._element.find("div.page_properties");
		var page_properties_header = this._element.find("h3.page_properties");

		if(page_data.page_properties != undefined) {
			page_properties_container.empty().show();
			page_properties_header.show();
			var default_name = "{{writeString=wns.default}}";
			for(property_name in page_data.page_properties) {
				var attrs = page_data.page_properties[property_name];
				var property_container = Widget.parseHTML('{{includeTemplate=property_container}}');
				property_container.data('propertyName', property_name);
				var label = property_container.find('label').text(attrs.display_name);
				var input = property_container.find('input').val(attrs.value);
				if(attrs.defaultValue) {
					var span = property_container.find('span.page_property_default_name').text(attrs.defaultValue);
					if(attrs.type === 'color') {
						input.bind('change', function(defaultValue) {
							if(this.val()) {
								this.css({backgroundColor: this.val()});
							} else {
								this.css({backgroundColor: defaultValue});
							}
						}.bind(input, attrs.defaultValue)).triggerHandler('change');
					}
				} else {
					input.next().remove();
				}
				page_properties_container.append(property_container);
			}
		} else {
			page_properties_header.hide();
		}
	},
	
	current_page_name: function() {
		return this._element.find("input[name='name']").val();
	},
	
	delete_page: function() {
		this.disable_input();
		this.deletePage(this.settings.delete_callback);
	},
	
	save: function() {
		//Send all page_type widget instances the will_save message
		if(this.current_page_type) {
			this.current_page_type.will_save();
		}
		
		this.protector.release();
		var data = this._element.serializeArrayKV();
		delete data.page_property;
		data.page_properties = {};
		this._element.find("div.page_properties .page_property_container").each(function() {
			var page_property_container = jQuery(this);
			var property_name = page_property_container.data('propertyName');
			var property_value = page_property_container.find('input').val();
			if(property_value) {
				data.page_properties[property_name] = property_value;
			}
		});
		
		//Save the data
		this.saveData(data, function() {
			this.fill_data();
			this.fire('saved');
			
			//Send all page_type widget instances the did_save message
			if(this.current_page_type) {
				this.current_page_type.did_save();
			}
		});
	},
	
	settings: {
		active_accordion: 0,
		delete_callback: jQuery.noop
	}
};
