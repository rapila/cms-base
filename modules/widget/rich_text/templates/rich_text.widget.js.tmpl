Widget.types.rich_text = {
	settings: {
		customConfig: '',
		entities: false,
		bodyClass: 'editing',
		baseFloatZIndex: 10000, //jQuery UI dialog’s z-indices start at 1000 or so and get incremented so we need to be an order of magnitude higher here…
		resize_enabled: false,
		height: 400,
		inline_css: ''
	},
	
	initialize: function() {
		var _this = this;
		CKEDITOR.on('dialogDefinition', function(ev) {
			var dialogName = ev.data.name;
			var dialogDefinition = ev.data.definition;
			if(dialogDefinition.rich_text_widget_additions_done) {
				return;
			}
			dialogDefinition.rich_text_widget_additions_done = true;
			if(dialogName == 'image') {
				var picker_tab = dialogDefinition.addContents({
					id : 'picker',
					label : '{{writeString=wns.richtext.image_picker}}',
					accessKey : 'P',
					elements : [
						{
							html: '<div></div>',
							id : 'picker_field',
							type : 'html'
						}
					]
				});
				dialogDefinition.onLoad = CKEDITOR.tools.override(dialogDefinition.onLoad, function(orig) {
					return function() {
						if(this.rich_text_widget_additions_done) {
							return;
						}
						this.rich_text_widget_additions_done = true;
						var dialog = this;
						var picker_field = this.getContentElement('picker', 'picker_field');
						var element = jQuery(picker_field.getElement().$);
						element.attr('data-widget-type', 'image_picker').prepareWidget(function(widget) {
							widget.set_callback(function(image_id) {
								dialog.setValueOf('info', 'txtUrl', widget.document_url_from_id(image_id));
								dialog.selectPage('info');
							});
						});
						return orig.apply(this, arguments);
					};
				});
			} else if(dialogName == 'link') {
				var infoTab = dialogDefinition.getContents('info');
				var linkType = infoTab.get('linkType');
				linkType.items.unshift(['{{writeString=wns.richtext.document_link}}', 'document']);
				linkType.items.unshift(['{{writeString=wns.richtext.external_link}}', 'external']);
				linkType.items.unshift(['{{writeString=wns.richtext.internal_link}}', 'internal']);
				linkType.setup = function(data) {
					if(data.type === 'url' && data.url && data.url.protocol === undefined) {
						var url = data.url.url;
						var id = url.split(/\//).pop(), index;
						if((index = id.indexOf('?')) > -1) {
							id = id.substring(0, index);
						}
						if(url.indexOf('/internal_link_proxy/') > -1) {
							data.type = 'internal';
							id = url.substring(url.indexOf('/internal_link_proxy/')+'/internal_link_proxy/'.length);
							data.internal_link_id = id;
						} else if(url.indexOf('/external_link_proxy/') > -1) {
							data.type = 'external';
							data.external_link_id = id;
						} else if(url.indexOf('/display_document/') > -1) {
							data.type = 'document';
							data.document_id = id;
						}
					}
					this.setValue(data.type);
				};
				linkType.commit = function(data) {
					data.type = this.getValue();
					if (data.type == 'document' || data.type == 'external' || data.type == 'internal') {
						data.type = 'url';
					}
				};
				linkType.onChange = CKEDITOR.tools.override(linkType.onChange, function(orig) {
					return function() {
						orig.apply(this, arguments);
						var dialog = this.getDialog();
						
						var internal_link_chooser = dialog.getContentElement('info', 'internal_link_chooser');
						var internal_link_chooser_element = jQuery(internal_link_chooser.getElement().getParent().getParent().$);
						var external_link_chooser = dialog.getContentElement('info', 'external_link_chooser');
						var external_link_chooser_element = jQuery(external_link_chooser.getElement().getParent().getParent().$);
						var document_link_chooser = dialog.getContentElement('info', 'document_link_chooser');
						var document_link_chooser_element = jQuery(document_link_chooser.getElement().getParent().getParent().$);
						
						if(this.getValue() == 'internal') {
							internal_link_chooser_element.show();
							external_link_chooser_element.hide();
							document_link_chooser_element.hide();
						} else if(this.getValue() == 'external') {
							internal_link_chooser_element.hide();
							external_link_chooser_element.show();
							document_link_chooser_element.hide();
						} else if(this.getValue() == 'document') {
							internal_link_chooser_element.hide();
							external_link_chooser_element.hide();
							document_link_chooser_element.show();
						} else {
							internal_link_chooser_element.hide();
							external_link_chooser_element.hide();
							document_link_chooser_element.hide();
						}
						
						var editor = dialog.getParentEditor();
						if(editor.config.linkShowTargetTab && (this.getValue() == 'internal' || this.getValue() == 'external' || this.getValue() == 'document')) {
							dialog.showPage('target');
						}
					};
				});
				var chooser_setup = function(idName) {
					return function(data) {
						var widget_element = jQuery(this.getElement().$).children('[data-widget-type]');
						if(!!widget_element.length) {
							widget_element.val(data[idName]);
						} else {
							jQuery(this.getElement().$).data('id', data[idName]);
						}
					};
				};
				infoTab.add({
					html: '<div></div>',
					id : 'internal_link_chooser',
					type : 'html',
					setup: chooser_setup('internal_link_id')
				});
				infoTab.add({
					html: '<div></div>',
					id : 'external_link_chooser',
					type : 'html',
					setup: chooser_setup('external_link_id')
				});
				infoTab.add({
					html: '<div></div>',
					id : 'document_link_chooser',
					type : 'html',
					setup: chooser_setup('document_id')
				});
				dialogDefinition.onLoad = CKEDITOR.tools.override(dialogDefinition.onLoad, function(orig) {
					return function() {
						if(this.rich_text_widget_additions_done) {
							return;
						}
						this.rich_text_widget_additions_done = true;
						var dialog = this;
						
						_this.prepare_chooser(dialog, 'internal_link_chooser', 'page_input', 'proxy_url');
						_this.prepare_chooser(dialog, 'external_link_chooser', 'link_input', 'proxy_url');
						var document_link_chooser_element = _this.prepare_chooser(dialog, 'document_link_chooser', 'document_input', 'absolute_url');
						
						var file_uploader = Widget.create('file_upload');
						file_uploader.allow_drag_to(document_link_chooser_element, null, function() {
							return {
								callback: _this.document_link_chooser_widget.reload.bind(_this.document_link_chooser_widget),
								error: function() {}
							};
						});
						
						return orig.apply(this, arguments);
					};
				});
			}
		});
	},
	
	prepare: function() {
		var _this = this;
		var textarea = this.textarea = this._element.find('textarea');
		if(textarea.val() === '') {
			textarea.val(' ');
		}
		var module_content = this.getModuleContents();
		if(module_content !== null) {
			textarea.val(module_content);
		}
		if(!textarea.attr('id')) {
			textarea.attr('id', Widget.uuid());
		}
		if(this._element.isInDom()) {
			this.replace();
		} else {
			//Wait awhile before replacing the textarea if not yet attached to document
			var interval;
			interval = window.setInterval(function() {
				if(_this._element.isInDom()) {
					window.clearInterval(interval);
					_this.replace();
				}
			}, 100);
		}
	},
	
	replace: function() {
		var _this = this;
		var instance = this.instance = CKEDITOR.replace(this.textarea[0], this.settings);
		instance.on('instanceReady', function(event) {
			instance.dataProcessor.htmlFilter.addRules({
				elements: {
					img: function( element ) {
						var styling;
						if(!element.attributes.width) {
							if(element.attributes.style) {
								styling = element.attributes.style;
								var findwidth = new RegExp("\[width: \]\s*(((?!\[width: \]|\[px\]).)+)\s*\[px\]");
								var sWidth = findwidth.exec(styling);
								sWidth = sWidth[1];
								if(sWidth) element.attributes.width = sWidth;
							}
						}
						if(!element.attributes.height) {
							if(element.attributes.style) {
								styling = element.attributes.style;
								var findheight = new RegExp("\[height: \]\s*(((?!\[height: \]|\[px\]).)+)\s*\[px\]");
								var sHeight = findheight.exec(styling);
								sHeight = sHeight[1];
								if(sHeight) element.attributes.height = sHeight;
							}
						}
					}
				}
			});
			for(var i=1;i<=6;i++) {
				instance.dataProcessor.writer.setRules('h'+i, {
					indent : false,
					breakBeforeOpen : true,
					breakAfterOpen : false,
					breakBeforeClose : false,
					breakAfterClose : true
				});
			}
			instance.document.appendStyleText(_this.settings.inline_css);
		});
		_this.settings.insertable_parts && jQuery.each(_this.settings.insertable_parts, function(i, part) {
			var commandName = 'insert_'+part.name;
			instance.addCommand(commandName, {
				exec: function(editor) {
					if(part.type === 'end_of_body') {
						instance.document.getBody().appendHtml(part.content);
					} else if(part.type === 'inline') {
						instance.insertHtml(part.content);
					}
				},
				async: false
			});
			instance.ui.addButton(commandName, {
				label: part.tooltip,
				command: commandName
			});
		});
	},
	
	prepare_chooser: function(dialog, name, widget, url_function) {
		var chooser = dialog.getContentElement('info', name);
		var chooser_element = jQuery(chooser.getElement().$);
		var _this = this;
		Widget.createWithElement(widget, function(wdgt) {
			_this[name+'_widget'] = wdgt;
			wdgt.settings.default_value_label = '{{writeString=wns.richtext.links.use_url}}';
			if(widget === 'page_input') {
				wdgt.settings.include_virtual = true;
			}
			wdgt.handle('element_set', function() {
				if(chooser_element.data('id')) {
					wdgt.value(chooser_element.data('id'));
				}
				wdgt._element.addClass('cke_skin_kama cke_dialog_ui_input_select');
				wdgt._element.appendTo(chooser_element);
				wdgt._element.change(function() {
					dialog.setValueOf('info', 'url', wdgt[url_function]());
					dialog.setValueOf('info', 'protocol', '');
				});
			});
		}, jQuery.noop);
		return chooser_element;
	},
	
	set_inline_css: function(css) {
		this.settings.inline_css = css;
		if(this.instance && this.instance.document) {
			this.instance.document.appendStyleText(css);
		}
	},
	
	data_to_textarea: function() {
		if(this.instance) {
			this.instance.updateElement();
		}
	},
	
	data_from_textarea: function() {
		if(this.instance) {
			this.instance.setData(this.textarea.val());
		}
	},
	
	get_data: function() {
		if(!this.instance) {
			return this.textarea.val();
		}
		return this.instance.getData();
	},
	
	set_data: function(new_data) {
		var _this = this;
		if(!this.instance) {
			this.textarea.val(new_data);
		} else {
			this.instance.setData(new_data, function() {
				_this.instance.document.appendStyleText(_this.settings.inline_css);
			});
		}
	},
	
	destroy: function() {
		this.instance.destroy();
		delete this.instance;
	},
	
	resize_to: function(width, height) {
		if(!this.editor_contents) {
			this.editor_contents = this._element.find('.cke_contents');
		}
		if(height) {
			this.editor_contents.css('height', ''+height+'px');
		}
		if(width) {
			this.editor_contents.css('width', ''+width+'px');
		}
	}
};
