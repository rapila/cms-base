Widget.types.documents_view = {
	initialize: function() {
		this.changed = false;
	},
	
	prepare: function() {
		var documents_view = this;
		var id_prefix = 'documents-view-'+Widget.uuid();
		this._element.append('<ul/>');
		jQuery.each(this.settings.panels, function(i, item) {
			var panel_id = id_prefix+'-'+item;
			var panel = $('<div/>', {id: panel_id});
			var tab = $('<a/>');
			documents_view._element.tabs('add', '#'+item, item, 0);
		});
		var tabs_settings = {
			add: function(event, ui) {
				var panel = jQuery(ui.panel);
				var tab = jQuery(ui.tab);
				var item = tab.attr('href').substring(1);
				if(documents_view.tab_views[item]) {
					documents_view.tab_views[item].is_updated = true;
					tab.data('type', documents_view.tab_views[item]);
					tab.data('panel', panel);
				}
			},
			show: function(event, ui) {
				var tab = jQuery(ui.tab);
				documents_view.active_tab = tab;
				if(!tab.data('type')) {
					return;
				}
				if(!tab.data('widget')) {
					documents_view.init_tab(tab);
				} else {
					//Returns true if anythingâ€™s changed since the last time
					if(!tab.data('type').is_updated) {
						tab.data('widget').reload();
						documents_view.changed = false;
						tab.data('type').is_updated = true;
					}
				}
			}
		};
		this._element.tabs(tabs_settings);
		tabs_settings.show(null, {tab: this.active_tab});
	},
	
	init_tab: function(tab) {
		var type = tab.data('type');
		var panel = tab.data('panel');
		var widget_name = type.widget_name;
		var documents_view = this;
		Widget.createWithElement(widget_name, function(widget) {
			widget.handle('document-removed', documents_view.mark_background_views_dirty.bind(documents_view));
			tab.data('widget', widget);
			type.init.call(this, tab.data('widget'));
		}, function(widget) {
			panel.append(widget._element);
		}, this.getSessionForView(widget_name));
	},
	
	reload: function(force) {
		this.mark_background_views_dirty();
		this.active_tab.data('widget').reload(force);
		this.changed = false;
		jQuery('.ui-tabs-panel').focus();
	},
	
	mark_background_views_dirty: function() {
		var active_tab = this.active_tab.data('type');
		jQuery.each(this.tab_views, function(i, tab_type) {
			tab_type.is_updated = tab_type === active_tab;
		});
	},
	
	set_document_category_id: function(id) {
		var widget = this.active_tab.data('widget');
		if(widget.setDocumentCategoryId) {
			this.changed = widget.setDocumentCategoryId(id) || this.changed;
		}
	},
	
	set_search_string: function(string) {
		var widget = this.active_tab.data('widget');
		if(widget.setSearch) {
			this.changed = widget.setSearch(string) || this.changed;
		}
	},
	
	set_document_kind: function(kind) {
		var widget = this.active_tab.data('widget');
		if(widget.setDocumentKind) {
			this.changed = widget.setDocumentKind(kind) || this.changed;
		}
	},
	
	set_thumbnail_size: function(size) {
		var widget = this.active_tab.data('widget');
		if(widget.settings.thumbnail_size) {
			this.changed = widget.settings.thumbnail_size !== size || this.changed;
			widget.settings.thumbnail_size = size;
		}
	},
	
	tab_views: {
		list: {
			widget_name: 'document_list',
			init: function(widget) {
				
			},
			append_document: function(widget, document_id) {
				widget.get_list().append_row_with_data({id: document_id});
			}
		},
		thumbnail: {
			widget_name: 'document_thumbnail_view',
			init: function(widget) {
				widget.settings.allows_multiselect = true;
			},
			append_document: function(widget, document_id) {
				widget.append_thumbnail_with_document_id(document_id);
			}
		}
	},
	
	append_document: function(document_id) {
		var type = this.active_tab.data('type');
		var widget = this.active_tab.data('widget');
		type.append_document(widget, document_id);
	},
	
	settings: {
		panels: ['list', 'thumbnail'],
		document_category_id: null
	}
};
