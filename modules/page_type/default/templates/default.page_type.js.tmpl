(function() {
	function PageType(controller, page_id, container) {
		this.controller = controller;
		this.methods = controller.methods;
		this.page_id = page_id;
		this.container = container;
		this.has_updated_structure = false;
	}

	jQuery.extend(PageType.prototype, {
		find_structure: function(filter) {
			if(filter.attr) {
				filter = filter.attr('data-object-id');
			}
			if(!jQuery.isPlainObject(filter)) {
				filter = {id: parseInt(filter, 10)};
			}
			var result = null;
			jQuery.each(this.filled_frontend_modules, function(container_name, container_params) {
				if(filter.container && filter.container !== container_name) {
					return true;
				}
				var ret = true;
				jQuery.each(container_params.contents, function(i, content_params) {
					if(content_params.id === filter.id || filter.obj === content_params) {
						result = {container: container_params, index: i, content: content_params};
						ret = false;
						return false;
					}
				});
				return ret;
			});
			return result;
		},

		update_structure: function(callback) {
			if(this.has_updated_structure) {
				return callback();
			}
			if(this.is_updating_structure) {
				return jQuery.when.apply(jQuery, this.is_updating_structure).then(callback);
			}
			
			var waiters = this.is_updating_structure = [];
			var _this = this;
			
			this.methods.adminGetContainers(function(containers) {
				_this.containers = containers;
			}.deferred(waiters));
			
			this.methods.adminListFilledFrontendModules(function(filled_frontend_modules) {
				_this.filled_frontend_modules = filled_frontend_modules;
			}.deferred(waiters));

			this.methods.adminListPossibleFrontendModules(function(possible_frontend_modules) {
				_this.possible_frontend_modules = possible_frontend_modules;
			}.deferred(waiters));

			this.filled_module_li = Widget.parseHTML('{{includeTemplate=filled_module}}');

			jQuery.when.apply(jQuery, waiters).then(function() {
				_this.has_updated_structure = true;
				_this.is_updating_structure = false;
				callback();
			});
		},

		update_admin_container: function(container, language_id) {
			var _this = this;
			container.empty();
			container.append(Widget.parseHTML('{{includeTemplate=admin}}'));
			var filled_modules = container.find('.filled_modules');

			var bind = function(method) {
				return function(event) {
					method.call(_this, event, jQuery(this).closest('li'));
				};
			};
			filled_modules.delegate('li .remove_button', 'click', bind(this.remove_object));
			filled_modules.delegate('li .edit_condition_button', 'click', bind(this.edit_condition));
			filled_modules.delegate('li .edit_button', 'click', bind(this.edit_object));
			filled_modules.delegate('li .draft_status', 'click', bind(this.drop_draft));
			
			var available_modules = container.find('.available_modules');
			var delete_drop_zone = container.find('.delete_drop_zone').droppable({
				accept: 'li[data-container]',
				tolerance: 'pointer',
				activeClass: 'ui-state-draggable',
				hoverClass: 'ui-state-droppable',
				drop: function(event, ui) {
					_this.remove_object(event, ui.draggable, true);
				}
			});
			
			var container_html = this.containers.html;
			if(container_html) {
				Widget.parseHTML(container_html).appendTo(filled_modules);
			}
			if(this.containers.css_parsed) {
				filled_modules.addClass('css_parsed');
			} else {
				filled_modules.removeClass('css_parsed');
			}
			
			var filled_modules_containers = filled_modules.find('ol[data-container-name]');
			jQuery.each(this.filled_frontend_modules, function(container_name, container_params) {
				var target = filled_modules_containers.filter('[data-container-name='+container_name+']');
				jQuery.each(container_params.contents, function(i, content_params) {
					var content = content_params.language_objects[language_id];
					var li = _this.filled_module_li.clone().appendTo(target);
					li.attr({'data-object-type': content_params.object_type, 'data-container': container_name, 'data-object-id': content_params.id, 'data-language-id': language_id});
					_this.update_content_properties(li, {content: content_params});
				});
				_this.update_additional_container_info(target);
			});
			
			filled_modules_containers.sortable({
				connectWith: filled_modules_containers,
				helper: 'clone',
				update: function(event, ui) {

					if(ui.sender) {
						return;
					}
					var item = jQuery(ui.item);
					// get final target (not original one)
					var target = item.parent();
					var position = target.children().index(item);
					// just move within container
					if(target.attr('data-container-name') === item.attr('data-container')) {
						_this.methods.adminMoveObject(item.attr('data-object-id'), position, function() {
							md = _this.find_structure(item);
							md.container.contents.splice(md.index, 1);
							md.container.contents.splice(position, 0, md.content);
						});
						return;
					}
					// move to container and resort
					if(item.attr('data-container')) {
						var source = filled_modules_containers.filter('[data-container-name='+item.attr('data-container')+']');
						item.attr('data-container', target.attr('data-container-name'));
						_this.methods.adminMoveObject(item.attr('data-object-id'), position, target.attr('data-container-name'), function() {
							md = _this.find_structure(item);
							md.container.contents.splice(md.index, 1);
							_this.filled_frontend_modules[target.attr('data-container-name')].contents.splice(position, 0, md.content);
						});
						_this.update_additional_container_info(target);
						_this.update_additional_container_info(source);
						return;
					}
					// add new object, prepare for delete
					item.attr('data-container', target.attr('data-container-name'));
					_this.methods.adminAddObjectToContainer(target.attr('data-container-name'), item.attr('data-object-type'), position, function(content_params) {
						item.attr('data-object-id', content_params.id);

						_this.filled_frontend_modules[target.attr('data-container-name')].contents.splice(position, 0, content_params);
						_this.update_content_properties(item, {content: content_params});
					});
					_this.update_additional_container_info(target);
				}
			});

			var dragOptions = {
				cursor: "move",
				helper: 'clone',
				connectToSortable: filled_modules_containers
			};
			jQuery.each(this.possible_frontend_modules, function(object_type, module_name) {
				var element = _this.filled_module_li.clone(true).find('.module_name').text(module_name).end().attr({'data-object-type': object_type, 'data-language-id': language_id}).draggable(dragOptions).sortable();
				element.appendTo(available_modules);
			});
		},
		
		handle_admin: function() {
			var _this = this;
			Widget.createWithElement('language_tabs', function(widget) {
				widget.settings.active_languages = _this.controller.settings.active_languages;
				widget.handle('element_set', function(event, element) {
					_this.container.empty();
					_this.container.append(element);
				});
			}, function(language_tabs) {
				language_tabs.handle('tab.selected', function(event, language_id, tab_content) {
					_this.update_structure(_this.update_admin_container.bind(_this, tab_content, language_id));
				}, false, true);
			});
			
		},
		
		handle_preview: function(page_id, page_type) {
			//Initialized callback
			jQuery('div.filled-container').each(function() {
				// Get the container
				var filled_container = jQuery(this);
				// Append the preview bar
				var preview_bar = Widget.parseHTML('{{includeTemplate=preview_bar}}').hide().appendTo(document.body);
				preview_bar.data('filled_container', filled_container);
				filled_container.data('preview_bar', preview_bar);
				filled_container.data('protector', new UnsavedChanges());
			
				// Preview bar show/hide stuff
				filled_container.position_bar = function() {
					var offset = filled_container.offset();
					offset.top += filled_container.height();
					offset.left = Math.max(offset.left, 0);
					preview_bar.css({top: ''+offset.top+'px', left: ''+(offset.left)+'px'});
				};
			
				var leave_timeout = null;
				var leave = function(event) {
					leave_timeout = window.setTimeout(function() {
						if(filled_container.is('.editing')) {
							return;
						}
						preview_bar.hide('fast');
						leave_timeout = null;
					}, 1000);
				};
			
				filled_container.resize(function() {
					filled_container.position_bar();
				});
			
				filled_container.bind('mouseenter', function() {
					if(leave_timeout) {
						window.clearTimeout(leave_timeout); leave_timeout = null;
					}
					preview_bar.show('fast');
					filled_container.position_bar();
				}).bind('mouseleave', leave);
			
				preview_bar.bind('mouseenter', function(event) {
					if(leave_timeout) {
						window.clearTimeout(leave_timeout); leave_timeout = null;
					}
				}).bind('mouseleave', leave);
			});
			Widget.callStatic('permission', 'mayEditPageContents', page_id, function(may) {
				jQuery('.preview_bar').css({opacity: may ? 1 : 0.5})[may ? 'addClass' : 'removeClass']('may_edit');
			});
			// Button event handlers
			var cleanup = function(preview_bar, container) {
				container.data('protector').unprotect(container.children()).release();
				page_type.callPageTypeMethod('adminPreview', container.attr('data-object-id'), function(result, error) {
					var elements = Widget.parseHTML(result.preview_contents);
					container.empty().append(elements);
					container.removeClass('editing');
					preview_bar.removeClass('loading');
					container.position_bar();
					preview_bar.find('.additional-buttons').empty();
				});
			};
		
			jQuery('.preview_bar').delegate('.edit', 'click', function() {
				var preview_bar = jQuery(this).closest('.preview_bar');
				if(!preview_bar.is('.may_edit')) {
					return;
				}
				preview_bar.show('fast');
				var container = preview_bar.data('filled_container');
				if(container.is('.editing')) {
					return;
				}
				container.addClass('editing');
				preview_bar.addClass('loading');
				page_type.callPageTypeMethod('adminEdit', container.attr('data-object-id'), function(edit_info) {
					container.attr('data-editing-object-type', edit_info.type);
					Widget.create('language_object_control', function(language_object_control) {
						language_object_control.editor(function(result) {
							Widget.createWithElement(result[0], function(widget) {
								language_object_control.detail_widget = widget;
								if(widget.setObjectId) {
									widget.setObjectId(container.attr('data-object-id'));
								}
								widget.handle('element_set', function(event, element) {
									container.empty().append(element);
									container.data('protector').protect(element);
								});
							}, function(widget) {
								if(widget.additional_buttons) {
									var additional_button_pane = preview_bar.find('.additional-buttons');
									var button_prototype = jQuery('<div/>', {'class': 'ui-icon ui-corner-all'});
									jQuery.each(widget.additional_buttons, function(i, button) {
										var button_element = button_prototype.clone().addClass('ui-icon-'+button.icon).click(button.action.bind(widget)).attr('title', button.text);
										additional_button_pane.append(button_element);
									});
								}
								preview_bar.removeClass('loading').addClass('editing');
								container.data('edit_widget', widget);
								container.data('language_object_control', language_object_control);
								// Reposition the bar
								container.position_bar();
							}, result[1]);
						});
					}, edit_info.control_session_key);
				});
			}).delegate('.cancel', 'click', function() {
				var preview_bar = jQuery(this).closest('.preview_bar');
				var container = preview_bar.data('filled_container');
				container.data('protector').warn(function(ok) {
					if(ok) {
						preview_bar.removeClass('editing').addClass('loading');
						cleanup(preview_bar, container);
					}
				});
			}).delegate('.save', 'click', function(event) {
				var preview_bar = jQuery(this).closest('.preview_bar');
				var container = preview_bar.data('filled_container');
				preview_bar.removeClass('editing').addClass('loading');
				var widget = container.data('edit_widget');
				container.data('edit_widget', null);
				var language_object_control = container.data('language_object_control');
				container.data('language_object_control', null);
				if(widget) {
					language_object_control.save(widget.save(), event.shiftKey, cleanup.bind(this, preview_bar, container));
				} else {
					preview_bar.removeClass('loading').addClass('editing');
				}
			});
		},
	
		//Admin helper methods
		remove_object: function(event, item_to_remove, force) {
			var _this = this;
			var container = item_to_remove.parent();
			this.methods.adminRemoveObject(item_to_remove.attr('data-object-id'), !!force, function(deleted) {
				var md = _this.find_structure(item_to_remove);
				if(deleted && !force) {
					var language_id = item_to_remove.attr('data-language-id');
					md.content.language_objects[language_id].is_draft = true;
					md.content.language_objects[language_id].exists_in_language = false;
					_this.update_content_properties(item_to_remove, md);
				} else if(deleted) {
					//Remove the item in the structure
					md.container.contents.splice(md.index, 1);
					item_to_remove.remove();
					_this.update_additional_container_info(container);
				}
			});
		},

		control_widget: function(item_to_edit, callback) {
			var md = this.find_structure(item_to_edit).content;
			this.methods.adminEdit(item_to_edit.attr('data-object-id'), item_to_edit.attr('data-language-id'), function(edit_info) {
				Widget.create('language_object_control', function(language_object_control) {
					callback(language_object_control, md);
				}, edit_info.control_session_key);
			});
		},
	
		edit_object: function(event, item_to_edit) {
			var _this = this;
			this.control_widget(item_to_edit, function(language_object_control) {
				language_object_control.editor(function(result) {
					Widget.createWithElement(result[0], function(widget) {
						language_object_control.detail_widget = widget;
						if(widget.setObjectId) {
							widget.setObjectId(item_to_edit.attr('data-object-id'));
						}
				
						widget.handle('element_set', function(event, element) {
							Widget.callStatic('detail', 'clickable_labels_for', element);
							var save = function(is_draft) {
								language_object_control.save(widget.save(), is_draft, function(result) {
									//TODO: update object preview
									var md = _this.find_structure(item_to_edit);
									var language_id = item_to_edit.attr('data-language-id');
									md.content.language_objects[language_id].is_draft = is_draft;
									md.content.language_objects[language_id].exists_in_language = result.language_object_exists;
									_this.update_content_properties(item_to_edit, md);
									element.dialog('close');
								});
							};
							var protector = new UnsavedChanges(element);
							var buttons = [{
								text: '{{writeString=wns.save}}',
								'class': 'primary ui-state-highlight',
								click: save.bind(this, false),
								accesskey: 's'
							},
							{
								text: '{{writeString=wns.save_as_draft}}',
								click: save.bind(this, true)
							}];
							if(widget.additional_buttons) {
								jQuery.each(widget.additional_buttons, function(i, button) {
									buttons.push({text: button.text, click: button.action.bind(widget), 'class': 'ui-additional-button', icons: {primary: 'ui-icon-'+button.icon}});
								});
							}
							element.dialog({
								close: function() {
									protector.unprotect(element).release();
									if(widget.destroy) {
										widget.destroy();
									}
									element.dialog('destroy').remove();
								},
								beforeClose: function(event) {
									if(!event.originalEvent) {
										//dialog('close') was called programmatically
										return true;
									}
									protector.warn(function(ok) {
										ok && element.dialog('close');
									});
									return false;
								},
								title: item_to_edit.find('.module_name').text(),
								position: ['center', 50],
								// modal: true,
								width: widget.settings.preferred_width || 550,
								// open: function(event, ui){},
								resize: function(event, ui) {
									if(widget.resize_to) {
										widget.resize_to(null, ui.size.height-200);
									}
								},
								buttons: buttons
							});
						});
					}, jQuery.noop, result[1]);
				});
			});
		},
	
		edit_condition: function(event, item_to_edit) {
			var _this = this;
			Widget.create('content_display_condition', function(widget) {
				widget.setContentObjectId(item_to_edit.attr('data-object-id'));
				widget.save_callback = function(result) {
					var md = _this.find_structure(item_to_edit);
					md.content.has_condition = result;
					_this.update_content_properties(item_to_edit, md);
				};
			}, jQuery.noop);
		},
	
		update_content_properties: function(element, md) {
			if(!md) {
				md = this.find_structure(element);
			}
			var language_id = element.attr('data-language-id');
			
			var props = md.content;
			var lang_props = props.language_objects[language_id];
			
			element[lang_props.exists_in_language ? 'removeClass' : 'addClass']('language_object_empty');
			element[lang_props.is_draft ? 'addClass' : 'removeClass']('is_draft');
			element[props.has_condition ? 'addClass' : 'removeClass']('has_condition');
			
			element.find('.module_name').text(props.object_type_display_name);
			element.attr('title', lang_props.content_info);
		},
		
		update_additional_container_info: function(container) {
			var info = container.prev('.template-container-info');
			var inherit_info = container.data('inheritedFrom');
			if(inherit_info !== undefined) {
				var inherited_from = info.find('.inherited_from');
				if(inherited_from.length === 0) {
					var inherit_info_text = "{{writeString=wns.page.content_inherited_from}}";
					inherit_info_text = inherit_info_text.replace("${page_name}", inherit_info);
					inherited_from = jQuery('<div/>').addClass('inherited_from').text(inherit_info_text).hide();
					info.append(inherited_from);
				}
				if(container.find('li[data-container]').length) {
					inherited_from.hide();
				} else {
					inherited_from.show();
				}
			}
		},

		drop_draft: function(event, item_to_edit) {
			var _this = this;
			this.methods.adminDropDraft(item_to_edit.attr('data-object-id'), function() {
				var md = _this.find_structure(item_to_edit);
				var language_id = item_to_edit.attr('data-language-id');
				md.content.language_objects[language_id].is_draft = false;
				this.update_content_properties(item_to_edit, md);
			}.bind(this));
		}
	
	});

	Widget.types.page_type.types['default'] = PageType;
})();
